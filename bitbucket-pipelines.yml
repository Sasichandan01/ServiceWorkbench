---
image: cloudwicklabs/bitbucketrunner:py312

definitions:
  scripts:
    - script: &validate_python
        |
        set -e
        echo "Running Python and YAML linting..."
        PY_FILES=$(find . -name "*.py")
        if [ -n "$PY_FILES" ]; then
          if ! command -v pylint &> /dev/null; then
            echo "Installing pylint..."
            pip install pylint || { echo "[ERROR] Failed to install pylint"; exit 1; }
          fi
          echo "${PY_FILES}" | xargs pylint --fail-under=7.0 || {
            echo "[ERROR] Pylint score too low or errors found"
            exit 1
          }
        else
          echo "No Python files found to lint."
        fi

    - script: &validate_yaml
        |
        set -e
        echo "Validating YAML files..."
        if ! command -v yamllint &> /dev/null; then
          echo "Installing yamllint..."
          pip install yamllint || { echo "[ERROR] Failed to install yamllint"; exit 1; }
        fi
        YAML_FILES=$(find . -name "*.yaml" -o -name "*.yml")
        if [ -n "$YAML_FILES" ]; then
          echo "${YAML_FILES}" | xargs yamllint || {
            echo "[ERROR] Yamllint validation failed"
            exit 1
          }
        else
          echo "No YAML files found to validate."
        fi

    - script: &authenticate
        |
        set -e
        echo "Setting up AWS OIDC authentication..."
        export AWS_REGION=us-east-1
        export AWS_ROLE_ARN=arn:aws:iam::043309350924:role/workbench-bitbucket-idp-role
        export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
        echo "${BITBUCKET_STEP_OIDC_TOKEN}" > "$AWS_WEB_IDENTITY_TOKEN_FILE" || {
          echo "[ERROR] Failed to write OIDC token"
          exit 1
        }
        chmod 600 "$AWS_WEB_IDENTITY_TOKEN_FILE"
        trap "rm -f $AWS_WEB_IDENTITY_TOKEN_FILE" EXIT

    - script: &deploy_stack
        |
        set -e
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Latest commit message: ${COMMIT_MSG}"

        if echo "${COMMIT_MSG}" | grep -q "\[DEPLOY\]"; then
          echo "DEPLOY keyword found in commit. Proceeding..."
          BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
          STACK_NAME="${BRANCH_NAME}-deployment"

          if [ ! -f "Templates/Resources/deploy.yaml" ]; then
            echo "[ERROR] Templates/Resources/deploy.yaml not found"
            exit 1
          fi

          chmod +x Scripts/swagger-replacement.sh
          ./Scripts/swagger-replacement.sh "${BRANCH_NAME}"
          
          aws cloudformation deploy \
            --template-file Templates/Resources/deploy.yaml \
            --stack-name "$STACK_NAME" \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM \
            --parameter-overrides pPrefix="${BRANCH_NAME}" \
            --no-fail-on-empty-changeset || {
              echo "[ERROR] CloudFormation deployment failed"
              exit 1
            }

          echo "Waiting for stack creation..."
          aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
          # if ! aws cloudformation wait stack-update-complete --stack-name "$STACK_NAME"; then
          #   aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME" || {
          #     echo "[ERROR] Stack creation or update failed"
          #     exit 1
          #   }
          # fi
          echo "API deployment completed successfully."
        else
          echo "Skipping deployment: No DEPLOY keyword in commit message."
        fi

    - script: &deploy_infra
        |
        set -e
        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
        echo "Branch name: $BRANCH_NAME"

        if [ "$BRANCH_NAME" != "develop" ]; then
          echo "[ERROR] Infra deployment only allowed from 'develop' branch"
          exit 1
        fi

        if [ ! -f "Templates/Resources/infra.yaml" ]; then
          echo "[ERROR] Templates/Resources/infra.yaml not found"
          exit 1
        fi

        STACK_NAME="${BRANCH_NAME}-infra"
        echo "Deploying infrastructure stack: $STACK_NAME"

        aws cloudformation deploy \
          --template-file Templates/Resources/infra.yaml \
          --stack-name "$STACK_NAME" \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides pApplicationPrefix="${BRANCH_NAME}" || {
            echo "[ERROR] Infra deployment failed"
            exit 1
          }

    - script: &build_ui
        |
        set -e
        echo "Building UI from Web directory..."
        cd Web

        STACK_NAME="develop-infra"
        REGION="us-east-1"

        echo "Fetching Cognito values from stack: $STACK_NAME..."

        USER_POOL_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CognitoUserPoolId'].OutputValue" \
          --output text)

        CLIENT_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CognitoAppClientId'].OutputValue" \
          --output text)

        REGION_VALUE=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CognitoRegion'].OutputValue" \
          --output text)

        echo "Creating .env file with Cognito values..."
        cat > .env <<EOF
        VITE_COGNITO_USER_POOL_ID="${USER_POOL_ID}"
        VITE_COGNITO_CLIENT_ID="${CLIENT_ID}"
        VITE_COGNITO_REGION="${REGION_VALUE}"
        EOF

        if ! command -v npm &> /dev/null; then
          echo "[ERROR] npm not found. Ensure the step image is Node.js-based (e.g., node:20)"
          exit 1
        fi

        echo "Installing npm dependencies..."
        npm install --legacy-peer-deps || {
          echo "[ERROR] npm install failed"
          exit 1
        }

        echo "Checking if Vite is available..."
        if ! npx vite --version &> /dev/null; then
          echo "Installing Vite locally..."
          npm install --save-dev vite || {
            echo "[ERROR] Failed to install Vite"
            exit 1
          }
        fi

        echo "Running UI build..."
        npm run build || {
          echo "[ERROR] UI build failed"
          exit 1
        }

        echo "Build complete. Contents of dist/:"
        ls dist

    - script: &deploy_ui_to_s3
        |
        set -e
        echo "Deploying UI to S3..."
        UI_BUCKET_NAME="service-workbench-artifacts"
        echo "Current working directory: $(pwd)"
        echo "Directory tree:"
        find .
        # cd Web
        if [ ! -d "dist" ]; then
          echo "[ERROR] dist/ folder not found"
          exit 1
        fi

        echo "Syncing contents to S3..."
        aws s3 sync dist/ "s3://${UI_BUCKET_NAME}/web/" --delete || {
          echo "[ERROR] S3 sync failed"
          exit 1
        }


        STACK_NAME="develop-infra" # or dynamically set based on branch
        REGION="us-east-1"

        echo "Fetching CloudFront Distribution ID from stack outputs..."
        CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CloudfrontDistributionId'].OutputValue" \
          --output text)

        if [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
          echo "[ERROR] Failed to fetch CloudFront Distribution ID from stack outputs"
          exit 1
        fi

        echo "Creating CloudFront invalidation..."
        aws cloudfront create-invalidation \
          --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
          --paths "/*" || {
            echo "[ERROR] CloudFront invalidation failed"
            exit 1
        }

        echo "UI successfully deployed and CloudFront cache invalidated."

    - script: &update_lambda_code
        |
        set -e

        if [ -z "$LAMBDA_NAME" ]; then
          echo "[ERROR] LAMBDA_NAME is required"
          exit 1
        fi

        S3_BUCKET="service-workbench-artifacts"
        ZIP_PATH="/tmp/${LAMBDA_NAME}.zip"
        BASE_DIR="Code"

        echo "Listing contents of $BASE_DIR:"
        ls -alR "$BASE_DIR"

        echo "Searching for file named '${LAMBDA_NAME}.py' inside '$BASE_DIR'..."
        MATCHING_FILES=$(find "$BASE_DIR" -type f -name "${LAMBDA_NAME}.py")

        if [ -z "$MATCHING_FILES" ]; then
          echo "[ERROR] No file found named '${LAMBDA_NAME}.py' under $BASE_DIR"
          exit 1
        fi

        NUM_MATCHES=$(echo "$MATCHING_FILES" | wc -l)
        if [ "$NUM_MATCHES" -gt 1 ]; then
          echo "[ERROR] Multiple files found named '${LAMBDA_NAME}.py':"
          echo "$MATCHING_FILES"
          exit 1
        fi

        FILE_PATH=$(echo "$MATCHING_FILES" | head -n1)

        echo "Found Lambda file: $FILE_PATH"

        # Copy and rename to a temp location as lambda_function.py
        TEMP_FILE="/tmp/lambda_function.py"
        cp "$FILE_PATH" "$TEMP_FILE"

        echo "Creating zip with renamed file as lambda_function.py"
        zip -j "$ZIP_PATH" "$TEMP_FILE" || {
          echo "[ERROR] Failed to create zip"
          exit 1
        }

        echo "Uploading to S3: s3://${S3_BUCKET}/lambdas/${LAMBDA_NAME}.zip"
        aws s3 cp "$ZIP_PATH" "s3://${S3_BUCKET}/lambdas/${LAMBDA_NAME}.zip" || {
          echo "[ERROR] Failed to upload to S3"
          exit 1
        }

        echo "Updating Lambda: $LAMBDA_NAME"
        aws lambda update-function-code \
          --function-name "$LAMBDA_NAME" \
          --zip-file "fileb://${ZIP_PATH}" || {
            echo "[ERROR] Lambda update failed"
            exit 1
          }

        echo "Lambda '$LAMBDA_NAME' updated successfully with zip containing lambda_function.py"



    - script: &zip_and_upload_lambdas
        |
        set -e
        echo "Zipping and uploading lambda files under Code/Lambdas to S3..."

        BASE_DIR="Code/Lambdas"
        DEST_BUCKET="service-workbench-artifacts"
        # DEST_BUCKET="mayank-swb"
        LAMBDA_ZIP_DIR="lambda_zips"
        mkdir -p "$LAMBDA_ZIP_DIR"
        trap "rm -rf $LAMBDA_ZIP_DIR" EXIT

        # Loop over immediate subdirectories of Code/Lambdas
        for CATEGORY in "$BASE_DIR"/*; do
          if [ -d "$CATEGORY" ]; then
            CATEGORY_NAME=$(basename "$CATEGORY")
            S3_PREFIX="lambdas/${CATEGORY_NAME,,}"  # Lowercase folder name

            # Loop over all Python files inside the folder
            find "$CATEGORY" -maxdepth 1 -type f -name "*.py" | while read -r py_file; do
              FILE_NAME=$(basename "$py_file" .py)
              ZIP_PATH="${LAMBDA_ZIP_DIR}/${FILE_NAME}.zip"
              TEMP_DIR="${LAMBDA_ZIP_DIR}/temp_${FILE_NAME}"

              echo "Processing $py_file -> $ZIP_PATH"

              mkdir -p "$TEMP_DIR"
              cp "$py_file" "$TEMP_DIR/lambda_function.py"
              (
                cd "$TEMP_DIR"
                zip -r "../${FILE_NAME}.zip" lambda_function.py > /dev/null
              )
              rm -rf "$TEMP_DIR"

              echo "Uploading ${ZIP_PATH} to s3://${DEST_BUCKET}/${S3_PREFIX}/${FILE_NAME}.zip"
              aws s3 cp "${ZIP_PATH}" "s3://${DEST_BUCKET}/${S3_PREFIX}/${FILE_NAME}.zip" || {
                echo "[ERROR] Failed to upload ${ZIP_PATH}"
                exit 1
              }
            done
          fi
        done

        echo "All zips uploaded to S3 under lambdas/<folder>/ structure."
  
    - script: &zip_and_upload_layers
        |
        set -e
        echo "Zipping Code/Layers + installing dependencies from root-level requirements.txt..."

        BASE_DIR="Code/Layers"
        DEST_BUCKET="service-workbench-artifacts"
        LAYER_ZIP_DIR="layers_zips"
        ZIP_NAME="layers.zip"
        ZIP_PATH="${LAYER_ZIP_DIR}/${ZIP_NAME}"

        mkdir -p "$LAYER_ZIP_DIR"
        trap "rm -rf $LAYER_ZIP_DIR /tmp/layer_temp" EXIT

        TEMP_LAYER_DIR="/tmp/layer_temp"
        PYTHON_DIR="${TEMP_LAYER_DIR}/python"

        mkdir -p "$PYTHON_DIR"

        echo "Copying all files and folders from $BASE_DIR to $PYTHON_DIR"
        cp -r "$BASE_DIR"/* "$PYTHON_DIR/"

        # Install dependencies from repo root-level requirements.txt (not copied into zip)
        if [ -f "requirements.txt" ]; then
          echo "Installing dependencies from root-level requirements.txt..."
          pip install --upgrade pip
          pip install -r requirements.txt -t "$PYTHON_DIR" || {
            echo "[ERROR] Failed to install requirements"
            exit 1
          }
        else
          echo "[WARN] No root-level requirements.txt found."
        fi

        echo "Creating layers zip at: $ZIP_PATH"
        (cd "$TEMP_LAYER_DIR" && zip -r "$OLDPWD/$ZIP_PATH" python)

        echo "Uploading to s3://${DEST_BUCKET}/layers/${ZIP_NAME}"
        aws s3 cp "$ZIP_PATH" "s3://${DEST_BUCKET}/layers/${ZIP_NAME}" || {
          echo "[ERROR] Upload to S3 failed"
          exit 1
        }

        echo "✅ Layer zip created and uploaded successfully — only includes 'python/' directory"



  steps:
    - step: &lint_and_validate
        name: Lint and Validate
        script:
          - echo "Starting linting and validation..."
          - *validate_python
          - *validate_yaml
          - echo "Linting and validation completed successfully."

    - step: &deploy
        name: Deploy Stack
        oidc: true
        script:
          - echo "Starting deployment process..."
          - *authenticate
          - *deploy_stack

    - step: &deploy_infra_stack
        name: Deploy Infrastructure
        oidc: true
        script:
          - echo "Starting infrastructure deployment..."
          - *authenticate
          - *deploy_infra

    - step: &build_and_deploy_ui
        name: Build and Deploy UI
        image: node:20
        oidc: true
        script:
          - apt-get update && apt-get install -y awscli
          - *authenticate
          - *build_ui
          - *deploy_ui_to_s3
    
    - step: &updating_lambda
        name: Update Lambda Function
        oidc: true
        script:
          - echo "Starting Lambda function update..."
          - *authenticate
          - *update_lambda_code
    
    - step: &zipping_and_uploading_lambdas
        name: Zip and Upload Lambdas
        oidc: true
        script:
          - echo "Zipping and uploading lambda files..."
          - *zip_and_upload_lambdas

pipelines:
  branches:
    wb-mayank:
      - step: *lint_and_validate
      - step: *zipping_and_uploading_lambdas
      - step: *deploy

    wb-abhishek:
      - step: *lint_and_validate
      - step: *zipping_and_uploading_lambdas
      - step: *deploy

    wb-salma:
      - step: *lint_and_validate
      - step: *deploy

    wb-bhargav:
      - step: *lint_and_validate
      - step: *deploy

    wb-init:
      - step: *lint_and_validate
      - step: *deploy

    wb-*:
      - step: *lint_and_validate

    develop:
      - step: *lint_and_validate
      - step: *deploy_infra_stack
      - step: *zipping_and_uploading_lambdas
      - step: *deploy

  custom:
    Infra-setup:
      - step:
          name: Manual Infra Deployment
          oidc: true
          script:
            - *authenticate
            - *deploy_infra

    UI-setup:
      - step:
          name: Manual UI Deployment
          image: node:20
          oidc: true
          script:
            - apt-get update && apt-get install -y awscli
            - *authenticate
            - *build_ui
            - *deploy_ui_to_s3

    Update-lambda:
      - variables:
          - name: LAMBDA_NAME
            default: "abc"
            required: true
            description: "Enter the AWS Lambda function name (e.g., lambda1)"
      - step:
          name: Update Lambda Function (Manual)
          oidc: true
          script:
            - *authenticate
            - *update_lambda_code

    Zip-and-upload-lambdas:
      - step:
          name: Zip and Upload Lambdas (Manual)
          oidc: true
          script:
            - *authenticate
            - *zip_and_upload_lambdas

    Zip-and-upload-layers:
      - step:
          name: Zip and Upload Layers (Manual)
          oidc: true
          script:
            - *authenticate
            - *zip_and_upload_layers