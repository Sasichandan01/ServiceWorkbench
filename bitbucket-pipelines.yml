---
image: cloudwicklabs/bitbucketrunner:py312

definitions:
  scripts:
    - script: &validate_python
        |
        set -e
        echo "Running Python and YAML linting..."
        PY_FILES=$(find . -name "*.py")
        if [ -n "$PY_FILES" ]; then
          if ! command -v pylint &> /dev/null; then
            echo "Installing pylint..."
            pip install pylint || { echo "[ERROR] Failed to install pylint"; exit 1; }
          fi
          echo "${PY_FILES}" | xargs pylint --fail-under=7.0 || {
            echo "[ERROR] Pylint score too low or errors found"
            exit 1
          }
        else
          echo "No Python files found to lint."
        fi

    - script: &validate_yaml
        |
        set -e
        echo "Validating YAML files..."
        if ! command -v yamllint &> /dev/null; then
          echo "Installing yamllint..."
          pip install yamllint || { echo "[ERROR] Failed to install yamllint"; exit 1; }
        fi
        YAML_FILES=$(find . -name "*.yaml" -o -name "*.yml")
        if [ -n "$YAML_FILES" ]; then
          echo "${YAML_FILES}" | xargs yamllint || {
            echo "[ERROR] Yamllint validation failed"
            exit 1
          }
        else
          echo "No YAML files found to validate."
        fi

    - script: &authenticate
        |
        set -e
        echo "Setting up AWS OIDC authentication..."
        export AWS_REGION=us-east-1
        export AWS_ROLE_ARN=arn:aws:iam::043309350924:role/workbench-bitbucket-idp-role
        export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
        echo "${BITBUCKET_STEP_OIDC_TOKEN}" > "$AWS_WEB_IDENTITY_TOKEN_FILE" || {
          echo "[ERROR] Failed to write OIDC token"
          exit 1
        }
        chmod 600 "$AWS_WEB_IDENTITY_TOKEN_FILE"
        trap "rm -f $AWS_WEB_IDENTITY_TOKEN_FILE" EXIT

    - script: &deploy_stack
        |
        set -e
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Latest commit message: ${COMMIT_MSG}"

        if [ -f ".lambda_version" ]; then
          export LAMBDA_VERSION=$(cat .lambda_version)
        else
          echo "[ERROR] Lambda version not found. Please run zip_and_upload_lambdas first."
          exit 1
        fi

        if echo "${COMMIT_MSG}" | grep -q "\[DEPLOY\]" || [ "$BITBUCKET_BRANCH" == "develop" ]; then
          echo "DEPLOY keyword found in commit. Proceeding..."
          BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
          STACK_NAME="${BRANCH_NAME}-deployment"

          if [ ! -f "Templates/Resources/deploy.yaml" ]; then
            echo "[ERROR] Templates/Resources/deploy.yaml not found"
            exit 1
          fi

          chmod +x Scripts/swagger-replacement.sh
          ./Scripts/swagger-replacement.sh "${BRANCH_NAME}"
          
          aws cloudformation deploy \
            --template-file Templates/Resources/deploy.yaml \
            --stack-name "$STACK_NAME" \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM \
            --parameter-overrides pPrefix="${BRANCH_NAME}" pRAGPrefix="${BRANCH_NAME//-/_}" LambdaArtifactVersion="${LAMBDA_VERSION}" DeploymentTrigger="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --no-fail-on-empty-changeset || {
              echo "[ERROR] CloudFormation deployment failed"
              exit 1
            }

          echo "Waiting for stack creation..."
          aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
          echo "API deployment completed successfully."
        else
          echo "Skipping deployment: No DEPLOY keyword in commit message."
        fi

    - script: &deploy_infra
        |
        set -e
        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
        echo "Branch name: $BRANCH_NAME"

        if [ "$BRANCH_NAME" != "develop" ]; then
          echo "[ERROR] Infra deployment only allowed from 'develop' branch"
          exit 1
        fi

        if [ ! -f "Templates/Resources/infra.yaml" ]; then
          echo "[ERROR] Templates/Resources/infra.yaml not found"
          exit 1
        fi

        STACK_NAME="${BRANCH_NAME}-infra"
        echo "Deploying infrastructure stack: $STACK_NAME"

        aws cloudformation deploy \
          --template-file Templates/Resources/infra.yaml \
          --stack-name "$STACK_NAME" \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides pApplicationPrefix="${BRANCH_NAME}" || {
            echo "[ERROR] Infra deployment failed"
            exit 1
          }

    - script: &build_ui
        |
        set -e
        echo "Building UI from Web directory..."

        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
        echo "Branch name: $BRANCH_NAME"

        cd "Web"

        STACK_NAME="${BRANCH_NAME}-deployment"
        REGION="us-east-1"

        echo "Fetching Cognito values from stack: $STACK_NAME..."

        USER_POOL_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CognitoUserPoolId'].OutputValue" \
          --output text)

        CLIENT_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CognitoAppClientId'].OutputValue" \
          --output text)

        REGION_VALUE=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CognitoRegion'].OutputValue" \
          --output text)

        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
          --output text)

        echo "Creating .env file with Cognito values..."
        cat > .env <<EOF
        VITE_COGNITO_USER_POOL_ID="${USER_POOL_ID}"
        VITE_COGNITO_CLIENT_ID="${CLIENT_ID}"
        VITE_COGNITO_REGION="${REGION_VALUE}"
        VITE_API_URL="${API_URL}"
        EOF

        if ! command -v npm &> /dev/null; then
          echo "[ERROR] npm not found. Ensure the step image is Node.js-based (e.g., node:20)"
          exit 1
        fi

        echo "Installing npm dependencies..."
        npm install --legacy-peer-deps || {
          echo "[ERROR] npm install failed"
          exit 1
        }

        echo "Checking if Vite is available..."
        if ! npx vite --version &> /dev/null; then
          echo "Installing Vite locally..."
          npm install --save-dev vite || {
            echo "[ERROR] Failed to install Vite"
            exit 1
          }
        fi

        echo "Running UI build..."
        npm run build || {
          echo "[ERROR] UI build failed"
          exit 1
        }

        echo "Build complete. Contents of dist/:"
        ls dist

    - script: &deploy_ui_to_s3
        |
        set -e
        echo "Deploying UI to S3..."
        UI_BUCKET_NAME="develop-service-workbench-website"
        echo "Current working directory: $(pwd)"
        echo "Directory tree:"
        find .
        # cd Web
        if [ ! -d "dist" ]; then
          echo "[ERROR] dist/ folder not found"
          exit 1
        fi

        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
        echo "Branch name: $BRANCH_NAME"

        echo "Syncing contents to S3..."
        aws s3 sync dist/ "s3://${UI_BUCKET_NAME}/${BRANCH_NAME}-web/" --delete || {
          echo "[ERROR] S3 sync failed"
          exit 1
        }

        STACK_NAME="${BRANCH_NAME}-deployment" # or dynamically set based on branch
        REGION="us-east-1"

        echo "Fetching CloudFront Distribution ID from stack outputs..."
        CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query "Stacks[0].Outputs[?OutputKey=='CloudfrontDistributionId'].OutputValue" \
          --output text)

        if [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
          echo "[ERROR] Failed to fetch CloudFront Distribution ID from stack outputs"
          exit 1
        fi

        echo "Creating CloudFront invalidation..."
        aws cloudfront create-invalidation \
          --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
          --paths "/*" || {
            echo "[ERROR] CloudFront invalidation failed"
            exit 1
        }

        echo "UI successfully deployed and CloudFront cache invalidated."

    - script: &update_lambda_code
        |
        set -e

        if [ -z "$LAMBDA_NAME" ] || [ -z "$S3_KEY" ]; then
          echo "[ERROR] LAMBDA_NAME and S3_KEY are required"
          exit 1
        fi

        S3_BUCKET="service-workbench-artifacts"
        REGION="us-east-1"

        echo "Updating Lambda '$LAMBDA_NAME' using S3 object s3://${S3_BUCKET}/${S3_KEY}..."

        aws lambda update-function-code \
          --function-name "$LAMBDA_NAME" \
          --s3-bucket "$S3_BUCKET" \
          --s3-key "$S3_KEY" \
          --region "$REGION" || {
            echo "[ERROR] Failed to update Lambda function"
            exit 1
          }

        echo "Lambda '$LAMBDA_NAME' updated successfully using ZIP from S3."
        # set -e

        # if [ -z "$LAMBDA_NAME" ]; then
        #   echo "[ERROR] LAMBDA_NAME is required"
        #   exit 1
        # fi

        # S3_BUCKET="service-workbench-artifacts"
        # ZIP_PATH="/tmp/${LAMBDA_NAME}.zip"
        # BASE_DIR="Code"

        # echo "Listing contents of $BASE_DIR:"
        # ls -alR "$BASE_DIR"

        # echo "Searching for file named '${LAMBDA_NAME}.py' inside '$BASE_DIR'..."
        # MATCHING_FILES=$(find "$BASE_DIR" -type f -name "${LAMBDA_NAME}.py")

        # if [ -z "$MATCHING_FILES" ]; then
        #   echo "[ERROR] No file found named '${LAMBDA_NAME}.py' under $BASE_DIR"
        #   exit 1
        # fi

        # NUM_MATCHES=$(echo "$MATCHING_FILES" | wc -l)
        # if [ "$NUM_MATCHES" -gt 1 ]; then
        #   echo "[ERROR] Multiple files found named '${LAMBDA_NAME}.py':"
        #   echo "$MATCHING_FILES"
        #   exit 1
        # fi

        # FILE_PATH=$(echo "$MATCHING_FILES" | head -n1)

        # echo "Found Lambda file: $FILE_PATH"

        # # Copy and rename to a temp location as lambda_function.py
        # TEMP_FILE="/tmp/lambda_function.py"
        # cp "$FILE_PATH" "$TEMP_FILE"

        # echo "Creating zip with renamed file as lambda_function.py"
        # zip -j "$ZIP_PATH" "$TEMP_FILE" || {
        #   echo "[ERROR] Failed to create zip"
        #   exit 1
        # }

        # echo "Uploading to S3: s3://${S3_BUCKET}/lambda/${LAMBDA_NAME}.zip"
        # aws s3 cp "$ZIP_PATH" "s3://${S3_BUCKET}/lambda/${LAMBDA_NAME}.zip" || {
        #   echo "[ERROR] Failed to upload to S3"
        #   exit 1
        # }

        # echo "Updating Lambda: $LAMBDA_NAME"
        # aws lambda update-function-code \
        #   --function-name "$LAMBDA_NAME" \
        #   --zip-file "fileb://${ZIP_PATH}" || {
        #     echo "[ERROR] Lambda update failed"
        #     exit 1
        #   }

        # echo "Lambda '$LAMBDA_NAME' updated successfully with zip containing lambda_function.py"

    - script: &zip_and_upload_lambdas
        |
        set -e
        echo "Zipping and uploading lambda files under Code/Lambda to S3..."
        BASE_DIR="Code/Lambda"
        DEST_BUCKET="service-workbench-artifacts"
        LAMBDA_ZIP_DIR="lambda_zips"

        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')

        mkdir -p "$LAMBDA_ZIP_DIR"
        trap "rm -rf $LAMBDA_ZIP_DIR" EXIT
        LAMBDA_VERSION=$(date -u +"%Y%m%dT%H%M%SZ")
        echo "Using Lambda version: $LAMBDA_VERSION"
        export LAMBDA_VERSION
        echo "$LAMBDA_VERSION" > .lambda_version
        for CATEGORY in "$BASE_DIR"/*; do
          if [ -d "$CATEGORY" ]; then
            CATEGORY_NAME=$(basename "$CATEGORY")

            echo "Cleaning up old lambda zips for: ${CATEGORY_NAME,,}"
            aws s3 rm "s3://${DEST_BUCKET}/" --recursive --exclude "*" --include "lambda-*/${CATEGORY_NAME,,}/*.zip" || true


            S3_PREFIX="lambda-${LAMBDA_VERSION}/${CATEGORY_NAME,,}"

            # Get all .py files in the category
            mapfile -t PY_FILES < <(find "$CATEGORY" -maxdepth 1 -type f -name "*.py")
            if [ ${#PY_FILES[@]} -eq 0 ]; then
              echo "No Python files found in $CATEGORY"
              continue
            fi
            if [ ${#PY_FILES[@]} -eq 1 ]; then
              FILE_PATH="${PY_FILES[0]}"
              FILE_NAME=$(basename "$FILE_PATH" .py)
              ZIP_NAME="${FILE_NAME}.zip"
              TEMP_DIR="${LAMBDA_ZIP_DIR}/temp_${FILE_NAME}"

              echo "Processing single file $FILE_PATH -> $ZIP_NAME"
              mkdir -p "$TEMP_DIR"
              cp "$FILE_PATH" "$TEMP_DIR/lambda_function.py"
            else
              ZIP_NAME="${CATEGORY_NAME}.zip"
              TEMP_DIR="${LAMBDA_ZIP_DIR}/temp_${CATEGORY_NAME}"

              echo "Processing multiple files in $CATEGORY_NAME -> $ZIP_NAME"
              mkdir -p "$TEMP_DIR"
              for FILE in "${PY_FILES[@]}"; do
                cp "$FILE" "$TEMP_DIR/"
              done
            fi

            ZIP_PATH="${LAMBDA_ZIP_DIR}/${ZIP_NAME}"

            (
              cd "$TEMP_DIR"
              zip -r "../${ZIP_NAME}" . > /dev/null
            )
            rm -rf "$TEMP_DIR"
            echo "Uploading ${ZIP_PATH} to s3://${DEST_BUCKET}/${S3_PREFIX}/${ZIP_NAME}"
            aws s3 cp "${ZIP_PATH}" "s3://${DEST_BUCKET}/${S3_PREFIX}/${ZIP_NAME}" || {
              echo "[ERROR] Failed to upload ${ZIP_PATH}"
              exit 1
            }
          fi
        done
        echo "All zips uploaded to S3 under lambda/<folder>/ structure."
  
    - script: &zip_and_upload_layers
        |
        set -e
        echo "Zipping contents of Code/Layer into a 'python/' folder inside the zip..."

        BASE_DIR="Code/Layer"
        DEST_BUCKET="service-workbench-artifacts"
        LAYER_ZIP_DIR="layer_zips"
        ZIP_NAME="layer.zip"
        ZIP_PATH="${LAYER_ZIP_DIR}/${ZIP_NAME}"
        REGION="us-east-1"
        LAYER_NAME="ServiceWorkbenchLambdaLayer"

        mkdir -p "$LAYER_ZIP_DIR"
        # trap "rm -rf $LAYER_ZIP_DIR /tmp/layer_temp" EXIT

        TEMP_LAYER_DIR="/tmp/layer_temp"
        PYTHON_DIR="${TEMP_LAYER_DIR}/python"

        rm -rf "$TEMP_LAYER_DIR"
        mkdir -p "$PYTHON_DIR"

        echo "Copying all files and folders from $BASE_DIR to $PYTHON_DIR"
        cp -r "$BASE_DIR"/* "$PYTHON_DIR/"

        # Install dependencies from repo root-level requirements.txt (not copied into zip)
        if [ -f "requirements.txt" ]; then
          echo "Installing dependencies from root-level requirements.txt..."
          pip install --upgrade pip
          pip install -r requirements.txt -t "$PYTHON_DIR" || {
            echo "[ERROR] Failed to install requirements"
            exit 1
          }
        else
          echo "[WARN] No root-level requirements.txt found."
        fi

        echo "Creating layer zip at: $ZIP_PATH"
        (cd "$TEMP_LAYER_DIR" && zip -r "$OLDPWD/$ZIP_PATH" python)

        echo "Uploading to s3://${DEST_BUCKET}/layer/${ZIP_NAME}"
        aws s3 cp "$ZIP_PATH" "s3://${DEST_BUCKET}/layer/${ZIP_NAME}" || {
          echo "[ERROR] Upload to S3 failed"
          exit 1
        }

        echo "Publishing new Lambda Layer version..."
        PUBLISH_OUTPUT=$(aws lambda publish-layer-version \
          --layer-name "$LAYER_NAME" \
          --description "Updated layer from CI script" \
          --content S3Bucket="$DEST_BUCKET",S3Key="layer/${ZIP_NAME}" \
          --compatible-runtimes python3.8 python3.9 python3.10 \
          --region "$REGION") || {
            echo "[ERROR] Failed to publish layer"
            exit 1
          }

        NEW_LAYER_ARN=$(echo "$PUBLISH_OUTPUT" | jq -r '.LayerVersionArn')

        echo "Layer zip created and uploaded successfully — only includes 'python/' directory"

    - script: &update_branch_specific_lambdas
        |
        set -e
        echo "Updating Lambda functions for branch: $BITBUCKET_BRANCH"

        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
        REGION="us-east-1"

        echo "🔍 Listing Lambda functions for branch: $BRANCH_NAME"
        
        # Get all Lambda functions that start with the branch name
        FUNCTION_NAMES=$(aws lambda list-functions \
          --region "${REGION}" \
          --query "Functions[?starts_with(FunctionName, '${BRANCH_NAME}')].FunctionName" \
          --output text)

        if [ -z "$FUNCTION_NAMES" ]; then
          echo "No Lambda functions found for branch: $BRANCH_NAME"
          echo "Skipping Lambda updates."
          exit 0
        fi

        echo "Found Lambda functions for branch $BRANCH_NAME:"
        echo "$FUNCTION_NAMES" | tr '\t' '\n'

        # Update each Lambda function found for this branch
        for FUNCTION_NAME in $FUNCTION_NAMES; do
          echo "Attempting to update Lambda function: $FUNCTION_NAME"
          
          # Extract the base function name (remove branch prefix)
          BASE_FUNCTION_NAME=$(echo "$FUNCTION_NAME" | sed "s/^${BRANCH_NAME}-//")
          
          # Convert base function name to lowercase for S3 key
          BASE_FUNCTION_LOWER=$(echo "$BASE_FUNCTION_NAME" | tr '[:upper:]' '[:lower:]')
          
          # Look for zip file in S3 under lambda/<base_function_lowercase>/
          S3_BUCKET="service-workbench-artifacts"
          S3_PREFIX="lambda/${BASE_FUNCTION_LOWER}/"
          
          echo "Looking for zip files in S3 prefix: s3://${S3_BUCKET}/${S3_PREFIX}"
          
          # List all zip files in the specific folder
          ZIP_FILES=$(aws s3 ls "s3://${S3_BUCKET}/${S3_PREFIX}" --recursive | grep "\.zip$" | awk '{print $4}')
          
          if [ -z "$ZIP_FILES" ]; then
            echo "[WARN] No zip files found in s3://${S3_BUCKET}/${S3_PREFIX}"
            continue
          fi
          
          # Count number of zip files
          NUM_ZIPS=$(echo "$ZIP_FILES" | wc -l)
          
          if [ "$NUM_ZIPS" -eq 1 ]; then
            # Exactly one zip file found - use it
            ZIP_KEY=$(echo "$ZIP_FILES" | head -n1)
            echo "Found single zip file: $ZIP_KEY"
            
            echo "Updating Lambda function $FUNCTION_NAME with S3 key: $ZIP_KEY"
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --s3-bucket "${S3_BUCKET}" \
              --s3-key "${ZIP_KEY}" \
              --region "${REGION}" || {
                echo "[WARN] Failed to update Lambda function: $FUNCTION_NAME"
                continue
              }
            echo "Successfully updated Lambda function: $FUNCTION_NAME"
          elif [ "$NUM_ZIPS" -gt 1 ]; then
            echo "[WARN] Multiple zip files found for $FUNCTION_NAME:"
            echo "$ZIP_FILES"
            echo "Skipping update - please ensure only one zip file exists per function"
          else
            echo "[WARN] No zip files found for Lambda function: $FUNCTION_NAME"
          fi
        done

        echo "Completed Lambda function updates for branch: $BRANCH_NAME"

    - script: &update_selected_lambdas_with_layer
        |
        set -e
        echo "Updating selected Lambda functions with new Layer version..."

        # Config
        DEST_BUCKET="service-workbench-artifacts"
        LAYER_NAME="layer.zip"
        REGION="us-east-1"

        # Upload layer zip 
        # echo "Uploading layer zip to S3..."
        # aws s3 cp "layer_zips/${LAYER_NAME}" "s3://${DEST_BUCKET}/layer/${LAYER_NAME}"

        echo "Publishing new Lambda Layer version..."
        PUBLISH_OUTPUT=$(aws lambda publish-layer-version \
          --layer-name "ServiceWorkbenchLambdaLayer" \
          --description "Auto-published by Bitbucket Pipeline" \
          --content S3Bucket="${DEST_BUCKET}",S3Key="layer/${LAYER_NAME}" \
          --compatible-runtimes python3.12 python3.13 \
          --region "${REGION}" \
          --output json)

        NEW_LAYER_ARN=$(echo "$PUBLISH_OUTPUT" | jq -r '.LayerVersionArn')

        if [ -z "$NEW_LAYER_ARN" ]; then
          echo "[ERROR] Failed to publish new layer version."
          exit 1
        fi

        echo "New Layer Version ARN: $NEW_LAYER_ARN"

        # List of Lambda functions to update
        # TARGET_FUNCTIONS=(
        #   "wb-abhishek-RolesLambdaFunction"
        # )

        echo "Listing all Lambda functions..."
        FUNCTION_NAMES=$(aws lambda list-functions \
          --region "${REGION}" \
          --query 'Functions[*].FunctionName' \
          --output text)
        
        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-' | xargs)
        echo "Filtering functions with prefix: $BRANCH_NAME"

        TARGET_FUNCTIONS=$(echo "$FUNCTION_NAMES" | tr '\t' '\n' | grep "^${BRANCH_NAME}" || true)

        if [ -z "$TARGET_FUNCTIONS" ]; then
          echo "[INFO] No matching Lambda functions found for prefix: $BRANCH_NAME"
          exit 0
        fi

        # for FN in "${TARGET_FUNCTIONS[@]}"; do
        # for FN in $FUNCTION_NAMES; do
        for FN in $TARGET_FUNCTIONS; do
          echo "Checking $FN"

          EXISTING_LAYERS=$(aws lambda get-function-configuration \
            --function-name "$FN" \
            --region "${REGION}" \
            --query 'Layers[*].Arn' \
            --output text)

          if echo "$EXISTING_LAYERS" | grep -q "ServiceWorkbenchLambdaLayer"; then
            echo "Updating $FN with new layer version..."

            # Remove old layer and add new version
            UPDATED_LAYERS=$(echo "$EXISTING_LAYERS" | grep -v "ServiceWorkbenchLambdaLayer"; echo "$NEW_LAYER_ARN")

            aws lambda update-function-configuration \
              --function-name "$FN" \
              --layers $UPDATED_LAYERS \
              --region "${REGION}" || {
                echo "[ERROR] Failed to update layers for $FN"
                exit 1
              }

            echo "Successfully updated $FN"
          else
            echo "⏭Skipping $FN — does not use ServiceWorkbenchLambdaLayer"
          fi
        done

        echo "All targeted Lambdas updated."


  steps:
    - step: &lint_and_validate
        name: Lint and Validate
        script:
          - echo "Starting linting and validation..."
          - *validate_python
          - *validate_yaml
          - echo "Linting and validation completed successfully."

    - step: &deploy
        name: Deploy Stack
        oidc: true
        script:
          - echo "Starting deployment process..."
          - *authenticate
          - *deploy_stack

    - step: &deploy_infra_stack
        name: Deploy Infrastructure
        oidc: true
        script:
          - echo "Starting infrastructure deployment..."
          - *authenticate
          - *deploy_infra

    - step: &build_and_deploy_ui
        name: Build and Deploy UI
        image: node:20
        oidc: true
        script:
          - apt-get update && apt-get install -y awscli
          - *authenticate
          - *build_ui
          - *deploy_ui_to_s3
    
    - step: &updating_lambda
        name: Update Lambda Function
        oidc: true
        script:
          - echo "Starting Lambda function update..."
          - *authenticate
          - *update_lambda_code

    - step: &zipping_and_uploading_layers
        name: Zip and Upload Layers
        oidc: true
        script:
          - echo "Zipping and uploading layer files..."
          - *authenticate
          - *zip_and_upload_layers
    
    - step: &zipping_and_uploading_lambdas
        name: Zip and Upload Lambdas
        oidc: true
        script:
          - echo "Zipping and uploading lambda files..."
          - *authenticate
          - *zip_and_upload_lambdas

    - step: &update_branch_lambdas
        name: Update Branch Lambda Functions
        oidc: true
        script:
          - echo "Updating Lambda functions for current branch..."
          - *authenticate
          - *update_branch_specific_lambdas

pipelines:
  branches:
    wb-mayank:
      - step: *lint_and_validate
      - step: *zipping_and_uploading_layers
      - step: *zipping_and_uploading_lambdas
      - step: *deploy
      - step: *build_and_deploy_ui

    wb-abhishek:
      - step: *lint_and_validate
      - step: *zipping_and_uploading_layers
      - step: *zipping_and_uploading_lambdas
      - step: *deploy
      - step: *build_and_deploy_ui
      
    wb-salma:
      - step: *lint_and_validate
      - step: *zipping_and_uploading_layers
      - step: *zipping_and_uploading_lambdas
      - step: *deploy
      - step: *build_and_deploy_ui

    wb-bhargav:
      - step: *lint_and_validate
      - step: *zipping_and_uploading_layers
      - step: *zipping_and_uploading_lambdas
      - step: *deploy
      - step: *build_and_deploy_ui

    wb-*:
      - step: *lint_and_validate

    develop:
      - step: *lint_and_validate
      - step: *zipping_and_uploading_layers
      - step: *zipping_and_uploading_lambdas
      - step: *deploy
      - step: *deploy_infra_stack
      - step: *build_and_deploy_ui

  custom:
    Infra-setup:
      - step:
          name: Manual Infra Deployment
          oidc: true
          script:
            - *authenticate
            - *deploy_infra

    UI-setup:
      - step:
          name: Manual UI Deployment
          image: node:20
          oidc: true
          script:
            - apt-get update && apt-get install -y awscli
            - *authenticate
            - *build_ui
            - *deploy_ui_to_s3

    Update-lambda:
      - variables:
          - name: LAMBDA_NAME
            default: "abc"
            required: true
            description: "Enter the AWS Lambda function name (e.g., lambda1)"
          
          - name: S3_KEY
            default: "lambda/user/users_handler.zip"
            required: true
            description: "S3 key for the Lambda ZIP file (e.g., lambda/user/users_handler.zip)"

      - step:
          name: Update Lambda Function (Manual)
          oidc: true
          script:
            - *authenticate
            - *zip_and_upload_lambdas
            - *update_lambda_code

    Zip-upload-and-update-lambdas:
      - step:
          name: Zip and Upload Lambdas (Manual)
          oidc: true
          script:
            - *authenticate
            - *zip_and_upload_lambdas

    Zip-and-upload-layers:
      - step:
          name: Zip and Upload Layers (Manual)
          oidc: true
          script:
            - *authenticate
            - *zip_and_upload_layers
    
    Update-layer-and-lambdas:
      - step:
          name: Publish Layer and Update Lambdas
          oidc: true
          script:
            - *authenticate
            - *zip_and_upload_layers
            - *update_selected_lambdas_with_layer
