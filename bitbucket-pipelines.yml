---
image: cloudwicklabs/bitbucketrunner:py312

definitions:
  scripts:
    - script: &validate_python
        |
        set -e  # Fail script on any command failure
        echo "Running Python and YAML linting..."
        echo "Searching for Python files..."
        PY_FILES=$(find . -name "*.py")
        if [ -n "$PY_FILES" ]; then
          if ! command -v pylint &> /dev/null; then
            echo "Installing pylint..."
            pip install pylint || { echo "[ERROR] Failed to install pylint"; exit 1; }
          fi
          echo "${PY_FILES}" | xargs pylint --fail-under=7.0 || { 
            echo "[ERROR] Pylint score too low or errors found"; 
            exit 1; 
          }
        else
          echo "No Python files found to lint."
        fi

    - script: &validate_yaml
        |
        set -e
        echo "Validating YAML files..."
        if ! command -v yamllint &> /dev/null; then
          echo "Installing yamllint..."
          pip install yamllint || { echo "[ERROR] Failed to install yamllint"; exit 1; }
        fi
        YAML_FILES=$(find . -name "*.yaml" -o -name "*.yml")
        if [ -n "$YAML_FILES" ]; then
          echo "${YAML_FILES}" | xargs yamllint || { 
            echo "[ERROR] Yamllint validation failed"; 
            exit 1; 
          }
        else
          echo "No YAML files found to validate."
        fi

    - script: &authenticate
        |
        set -e
        echo "Setting up AWS OIDC authentication..."
        export AWS_REGION=us-east-1
        export AWS_ROLE_ARN=arn:aws:iam::043309350924:role/workbench-bitbucket-idp-role
        export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
        echo "${BITBUCKET_STEP_OIDC_TOKEN}" > "$AWS_WEB_IDENTITY_TOKEN_FILE" || { 
          echo "[ERROR] Failed to write OIDC token"; 
          exit 1; 
        }
        chmod 600 "$AWS_WEB_IDENTITY_TOKEN_FILE"  # Restrict token file permissions

    - script: &deploy_stack
        |
        set -e
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Latest commit message: ${COMMIT_MSG}"

        if echo "${COMMIT_MSG}" | grep -q "\[DEPLOY\]"; then
          echo "DEPLOY keyword found in commit. Proceeding..."
          BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
          STACK_NAME="${BRANCH_NAME}-simple-api"

          # Validate template existence
          if [ ! -f "templates/deploy.yaml" ]; then
            echo "[ERROR] templates/deploy.yaml not found"; 
            exit 1;
          fi

          aws cloudformation deploy \
            --template-file templates/deploy.yaml \
            --stack-name "$STACK_NAME" \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM \
            --parameter-overrides pPrefix="${BRANCH_NAME}" \
            --no-fail-on-empty-changeset || { 
              echo "[ERROR] CloudFormation deployment failed"; 
              exit 1; 
            }

          echo "Waiting for stack creation..."
          aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
          echo "API deployment completed successfully."
        else
          echo "Skipping deployment: No DEPLOY keyword in commit message."
        fi
    
    - script: &deploy_infra
        |
        set -e
        BRANCH_NAME=$(echo "$BITBUCKET_BRANCH" | tr '/' '-')
        echo "Branch name: $BRANCH_NAME"
        
        if [ "$BRANCH_NAME" != "develop" ]; then
          echo "[ERROR] Infra deployment only allowed from 'develop' branch"
          exit 1
        fi

        if [ ! -f "templates/infra.yaml" ]; then
          echo "[ERROR] templates/infra.yaml not found"; 
          exit 1;
        fi

        STACK_NAME="${BRANCH_NAME}-infra"
        echo "Deploying infrastructure stack: $STACK_NAME"

        aws cloudformation deploy \
          --template-file templates/infra.yaml \
          --stack-name "$STACK_NAME" \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides pApplicationPrefix="${BRANCH_NAME}" || {
            echo "[ERROR] Infra deployment failed";
            exit 1;
          }

  steps:
    - step: &lint_and_validate
        name: Lint and Validate
        script:
          - echo "Starting linting and validation..."
          - *validate_python
          - *validate_yaml
          - echo "Linting and validation completed successfully."

    - step: &deploy
        name: Deploy Stack
        oidc: true
        script:
          - echo "Starting deployment process..."
          - *authenticate
          - *deploy_stack

    - step: &deploy_infra_stack
        name: Deploy Infrastructure
        oidc: true
        script:
          - echo "Starting infrastructure deployment..."
          - *authenticate
          - *deploy_infra

pipelines:
  branches:
    wb-*:
      - step: *lint_and_validate
      - step: *deploy
    
    develop:
      - step: *lint_and_validate
      - step: *deploy
      - step: *deploy_infra_stack

  custom:
    Infra-setup:
      - step:
          name: Manual Infra Deployment
          oidc: true
          script:
            - echo "Manual trigger from branch: ${BITBUCKET_BRANCH}"
            - *authenticate
            - *deploy_infra_stack
    
    # update-lambda:
    #   - step:
    #       name: Update Lambda Function (Manual)
    #       oidc: true
    #       script:
    #         - echo "Running manual Lambda function update on branch: ${BITBUCKET_BRANCH}"
    #         - *authenticate
    #         - **lambda_update