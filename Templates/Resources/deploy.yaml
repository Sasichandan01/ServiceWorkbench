AWSTemplateFormatVersion: '2010-09-09'
Description: Development cloudFormation template for the Service Workbench V2
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  pPrefix:
    Type: String
    Default: "develop"
    Description: Prefix for Lambda function naming

  LambdaArtifactVersion:
    Type: String
    Description: S3 path version folder for Lambda artifacts
  
  # GlueArtifactVersion:
  #   Type: String
  #   Description: S3 path version folder for Glue artifacts

  ApiName:
    Type: String
    Default: WorkbenchAPI
    Description: Name of the API Gateway API

  VPCPrefix:
    Type: String
    Default: WorkbenchVPC
    Description: Environment name prefix for VPC resources

  pArtifactsBucketName:
    Type: String
    Default: "service-workbench-artifacts"
    Description: Name of the S3 bucket for artifacts

  pRAGPrefix:
    Type: String
    Default: "develop"
    Description: rag-prefix
  
  DeploymentTrigger:
    Type: String
    Default: "2025-07-02T00:00:00Z"
    Description: Trigger date for deployment, used for versioning

  pWebSocketStage:
    Type: String
    Default: "prod"
    Description: "Stage name for websocket api"

  pTablesDataPrefix:
    Type: String
    Default: "tables"
    Description: "Prefix for stroing ddb data in s3"

  pWebScrapDocumentsPrefix:
    Type: String
    Default: "webscrap"
    Description: "Prefix for storing web scraping data into s3"
Resources:

  # S3 Bucket for artifacts
  MiscBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pPrefix}-service-workbench-misc"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["GET", "PUT", "POST", "DELETE"]
            AllowedOrigins: ["*"]
            ExposedHeaders: ["ETag"]
            MaxAge: 3000
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  MiscBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MiscBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${MiscBucket.Arn}/*"


  # CloudFront Origin Access Control (OAC)
  WebsiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${pPrefix}-service-workbench-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

# CloudFront Distribution
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !ImportValue WebsiteBucketRegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref WebsiteOAC
            OriginPath: !Sub "/${pPrefix}-web"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Logging:
          Bucket: !ImportValue LogsBucketDomainName
          Prefix: !Sub "${pPrefix}-cloudfront-logs/"
          IncludeCookies: false
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"
        - Key: SWB-User
          Value: "ServiceWorkbench"

# S3 Bucket Policy to allow CloudFront OAC access only
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !ImportValue WebsiteBucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub
              - "arn:aws:s3:::${BucketName}/*"
              - {BucketName: !ImportValue WebsiteBucketName}

# Bucket policy to allow CloudFront to write logs
  CloudFrontLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !ImportValue LogsBucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub
              - "arn:aws:s3:::${BucketName}/*"
              - {BucketName: !ImportValue LogsBucketName}
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !ImportValue LogsBucketArn
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

# Cognito User Pool and Client
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${pPrefix}-UserPool"
      AliasAttributes:
        - email
        - preferred_username
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: preferred_username
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: Role
          AttributeDataType: String
          Required: false
          Mutable: true
      AutoVerifiedAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailSubject: "Your temporary password for WorkBench"
          EmailMessage: "Your username is {username} and temporary password is {####}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Your verification code for WorkBench"
        EmailMessage: "Your verification code is {####}"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${pPrefix}-Client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "${pPrefix}-${AWS::AccountId}-auth"
      ManagedLoginVersion: "2"

  CleanupDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${pPrefix}-CleanupDLQ"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
    
  CognitoTriggersCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-CognitoTriggersCustomResource"
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchcognitocustomresourcelambda/WorkbenchCognitoCustomResource.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  CognitoTriggersResource:
    Type: Custom::CognitoTriggers
    Properties:
      ServiceToken: !GetAtt CognitoTriggersCustomResource.Arn
      UserPoolId: !Ref UserPool
      PreSignUpLambdaArn: !GetAtt PreSignUpFunction.Arn
      PreAuthLambdaArn: !GetAtt PreAuthFunction.Arn
      PreTokenLambdaArn: !GetAtt PreTokenGenerationFunction.Arn
      PostConfirmationLambdaArn: !GetAtt PostConfirmationFunction.Arn
      PostAuthLambdaArn: !GetAtt PostAuthFunction.Arn
      Changesetflag: "2025-07-02"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  PreSignUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-PreSignUp"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchpresignuplambda/WorkbenchPresignup.zip"
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
          USER_TABLE_NAME: !Ref UserTable
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  PreAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-PreAuth"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchpreauthlambda/WorkbenchPreAuth.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  PreTokenGenerationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-PreTokenGen"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchpretokengenerationlambda/WorkbenchPreTokengeneration.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  PostConfirmationFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-PostConfirm"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchpostconfirmationlambda/WorkbenchPostConfirmation.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
          USERS_TABLE: !Ref UserTable
          ROLE_TABLE_NAME: !Ref RolesTable
          DOMAIN: "ServiceWorkbench v2.0"
          SOURCE_EMAIL: "mayank.gupta@cloudwick.com"
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
          WORKSPACES_TABLE_NAME: !Ref WorkspacesTable
          RESOURCE_ACCESS_TABLE: !Ref ResourceAccessTable

      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  PostAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-PostAuth"
      Role: !GetAtt UserExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchpostauthlambda/WorkbenchPostAuth.zip"
      Environment:
        Variables:
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
          USERS_TABLE: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  UserPoolCleanUp:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-Workbench-UserPool"
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Timeout: 60
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Role: !GetAtt UserExecutionRole.Arn
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchuserpoolcleanuplambda/WorkbenchUserpoolCleanup.zip"
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
          USER_POOL_ID: !Ref UserPool
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreTokenPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PostConfirmPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PostAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

# Event Source Mapping for Cleanup Queue
  CleanupQueueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt CleanupQueue.Arn
      FunctionName: !GetAtt UserPoolCleanUp.Arn
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

# Main SQS queue with redrive policy
  CleanupQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${pPrefix}-CleanupQueue"
      VisibilityTimeout: 65
      ReceiveMessageWaitTimeSeconds: 20
      DelaySeconds: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CleanupDLQ.Arn
        maxReceiveCount: 5  # Message is sent to DLQ after 5 failed receives
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  # IAM Role for the Custom Resource Lambda
  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:UpdateUserPool
                Resource: !GetAtt UserPool.Arn
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  BedrockAgentLookupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${pPrefix}-BedrockAgentLookup-Table"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: AgentId
          AttributeType: S
      KeySchema:
        - AttributeName: AgentId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  BedrockAgentExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-BedrockAgentExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-BedrockCustomResourceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAgentManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pPrefix}-BedrockAgentLookup-Table"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt BedrockAgentExecutionRole.Arn

  BedrockAgentCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-AgentCustomResourceLambda"
      Runtime: python3.11
      Handler: AgentCustomResourceLambda.lambda_handler
      Role: !GetAtt CustomResourceRole.Arn
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${pPrefix}"
          AGENTS_TABLE_NAME: !Sub "${pPrefix}-BedrockAgentLookup-Table"
          AGENT_EXECUTION_ROLE: !GetAtt BedrockAgentExecutionRole.Arn
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          KNOWLEDGE_BASE_ID: !Ref VectorKnowledgeBase
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/agentcustomresourcelambda/AgentCustomResourceLambda.zip"
      Layers:
        - arn:aws:lambda:us-east-1:043309350924:layer:yaml-layer:1

  CodeGenerationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-CodeGenerationLambda"
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Role: !GetAtt ArchitectureAgentAGLambdaRole.Arn
      Timeout: 300
      MemorySize: 1024
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/codegenerationlambda/CodeGenerationLambda.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"


  BedrockAgentManager:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt BedrockAgentCustomResource.Arn 
      Environment: !Sub "${pPrefix}"
      Version: "1.0"
      changesetflag: '119-122'

  UserExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        
        - PolicyName: SQSPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SQSPutPolicies
                Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt CleanupQueue.Arn
        
        - PolicyName: DynamoDBPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBActivityLogsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*"
        
        - PolicyName: CognitoPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CognitoAccess
                Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
        
        - PolicyName: SESPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SESAccess
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"

        - PolicyName: S3Policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3PutAccess
                Effect: Allow
                Action:
                  - s3:PutObject
                Resource: "*"
        
        - PolicyName: SSMPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SSMAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: "*"
      
        - PolicyName: GlueJobPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: GlueJobAccess
                Effect: Allow
                Action:
                  - glue:StartJobRun
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/${GlueJob}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  RolesLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-RolesLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
  
  WorkspaceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-WorkspaceLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*
                  - !Sub arn:aws:dynamodb:us-east-1:043309350924:table/Wokbench-chathistory
                  - !Sub arn:aws:dynamodb:us-east-1:043309350924:table/Wokbench-chathistory/index/MessageIdIndex
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !ImportValue WorkspacesBucketArn
                  - !Sub
                    - "${BucketArn}/*"
                    - {BucketArn: !ImportValue WorkspacesBucketArn}
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: 
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
              - Effect: Allow
                Action: glue:StartJobRun
                Resource: '*'
              - Effect: Allow
                Action: states:StartExecution
                Resource: '*'
        - PolicyName: LogAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowLogsAndGlueAccess
                Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - glue:*
                  - logs:FilterLogEvents
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::develop-service-workbench-workspaces/*"
                  - !Sub "arn:aws:s3:::develop-service-workbench-workspaces"

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  ChatLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-ChatLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowLogsAndGlueAccess
                Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource: '*'     
        - PolicyName: WebSocketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
        - PolicyName: DDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowDDBAccess
                Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${pPrefix}-BedrockAgentLookup-Table"
              - Sid: DynamoDBActivityLogsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !ImportValue WorkspacesBucketArn
                  - !Sub
                    - "${BucketArn}/*"
                    - {BucketArn: !ImportValue WorkspacesBucketArn}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-GlueJobRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${pPrefix}-service-workbench-misc/*"
                  - !Sub "arn:aws:s3:::${pPrefix}-service-workbench-misc"
                  - !Sub "arn:aws:s3:::service-workbench-artifacts"
                  - !Sub "arn:aws:s3:::service-workbench-artifacts/*"
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:GetKnowledgeBase
                  - bedrock:GetDataSource
                  - bedrock:StartIngestionJob
                  - bedrock:GetIngestionJob
                  - bedrock:ListIngestionJobs
                Resource:
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${VectorKnowledgeBase}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${AuroraKnowledgeBase}"
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:ListStreams
                  - dynamodb:ExportTableToPointInTime
                  - dynamodb:DescribeExport
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-${pPrefix}-*"
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
 

  AuroraDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref AuroraKnowledgeBase
      Name: !Sub "${pPrefix}-Aurora-datasource"
      Description: 'Data source for DynamoDB synced data'
      DataSourceConfiguration:
        Type: 'S3'
        S3Configuration:
          BucketArn: !Sub "arn:aws:s3:::${pPrefix}-service-workbench-misc"  
          InclusionPrefixes:
            - !Ref pTablesDataPrefix
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: 'FIXED_SIZE'
          FixedSizeChunkingConfiguration:
            MaxTokens: 300
            OverlapPercentage: 20

  OpensearchDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref VectorKnowledgeBase
      Name: !Sub "${pPrefix}-Opensearch-datasource"
      Description: "S3 data source for documents"
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: !Sub "arn:aws:s3:::${pPrefix}-service-workbench-misc"  
          InclusionPrefixes:
            - !Ref pWebScrapDocumentsPrefix
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 300
            OverlapPercentage: 20

  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub "${pPrefix}-Workbench-RAGSync"
      Role: !GetAtt GlueJobRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://service-workbench-artifacts/glue/ragsyncgluejob/RAGSyncGlueJob.py"
        PythonVersion: '3'
      DefaultArguments:
        '--job-language': 'python'
        '--job-bookmark-option': 'job-bookmark-disable'
        '--enable-metrics': 'true'
        '--enable-continuous-cloudwatch-log': 'true'
        '--enable-continuous-log-filter': 'true'
        '--DYNAMODB_TABLE_PREFIX': !Sub "Workbench-${pPrefix}"
        '--AURORA_KB_ID': !Ref AuroraKnowledgeBase
        '--AURORA_DS_ID': !Ref AuroraDataSource
        '--OPENSEARCH_KB_ID': !Ref VectorKnowledgeBase
        '--OPENSEARCH_DS_ID': !Ref OpensearchDataSource
        '--OPENSEARCH_S3_BUCKET': !Sub "${pPrefix}-service-workbench-misc"
        '--OPENSEARCH_S3_PREFIX': !Ref pWebScrapDocumentsPrefix
        '--AURORA_S3_BUCKET': !Sub "${pPrefix}-service-workbench-misc"
        '--AURORA_S3_PREFIX': !Ref pTablesDataPrefix
        '--ACTION': 'docsapp'
        '--WAIT_FOR_SYNC': 'true'
        '--AWS_REGION': !Ref AWS::Region
        '--AWS_ACCOUNT_ID': !Ref AWS::AccountId
        "--additional-python-modules": "boto3>=1.28.32,botocore>=1.31.32,requests==2.31.0,beautifulsoup4>=4.12.3"
      GlueVersion: '4.0'
      MaxCapacity: 10
      MaxRetries: 1
      Timeout: 2880
      Description: 'Sync DynamoDB tables to Knowledge Base via S3'


  LambdaAuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-LambdaAuthorizer"
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Timeout: 300
      MemorySize: 1024
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Role: !GetAtt UserExecutionRole.Arn
      Code:
        S3Bucket: "service-workbench-artifacts"
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchlambdaauthorizerlambda/WorkbenchLambdaAuthorizer.zip"
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USERS_TABLE: !Ref UserTable
          CLIENT_ID: !Ref UserPoolClient
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench" 

  WorkspacesAndSolutionsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-workspacesandsolutions-lambda"
      Handler: WorkspacesAndSolutionsLambda.lambda_handler
      Role: !GetAtt WorkspaceLambdaExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Environment:
        Variables:
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
          SOLUTIONS_TABLE: !Ref SolutionsTable
          TEMPLATES_TABLE: !Ref TemplatesTable
          WORKSPACES_TABLE: !Ref WorkspacesTable
          EXECUTIONS_TABLE: !Ref SolutionExecutionsTable
          DATASOURCES_TABLE: !Ref DatasourcesTable
          ROLES_TABLE: !Ref RolesTable
          RESOURCE_ACCESS_TABLE: !Ref ResourceAccessTable
          WORKSPACES_BUCKET: !ImportValue WorkspacesBucket
          USERS_TABLE: !Ref UserTable
          CHAT_TABLE: "Wokbench-chathistory"
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workspacesandsolutionslambda/WorkspacesAndSolutionsLambda.zip"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Timeout: 900
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
  
  DatasourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pPrefix}-datasource-bucket"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["GET", "PUT", "POST", "DELETE"]
            AllowedOrigins: ["*"]
            ExposedHeaders: ["ETag"]
            MaxAge: 3000
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
  
  DatasourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DatasourceBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${DatasourceBucket.Arn}/*" 

  # API Gateway
  WorkbenchApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${pPrefix}-${ApiName}"
      StageName: prod
      DefinitionUri:
        Bucket: !Ref pArtifactsBucketName
        Key: develop/swagger.yaml
      EndpointConfiguration: REGIONAL
      AlwaysDeploy: True
      Description: !Sub "${DeploymentTrigger}"

  WorkspaceLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkspacesAndSolutionsLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*'

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Workbench-${pPrefix}-UserTable"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  ActivityLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Workbench-${pPrefix}-ActivityLogsTable"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: LogId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: LogId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserId-Index
          KeySchema:
            - AttributeName: UserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  WorkspacesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-WorkspacesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
        - AttributeName: WorkspaceName
          AttributeType: S
        - AttributeName: CreatedBy
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedBy-index
          KeySchema:
            - AttributeName: CreatedBy
              KeyType: HASH
            - AttributeName: WorkspaceName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  SolutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-SolutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
        - AttributeName: SolutionId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
        - AttributeName: SolutionId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  DatasourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-DatasourcesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DatasourceId
          AttributeType: S
        - AttributeName: DatasourceName
          AttributeType: S
        - AttributeName: CreatedBy
          AttributeType: S
      KeySchema:
        - AttributeName: DatasourceId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CreatedBy-DatasourceName-index
          KeySchema:
            - AttributeName: CreatedBy
              KeyType: HASH
            - AttributeName: DatasourceName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: DatasourceName-index
          KeySchema:
            - AttributeName: DatasourceName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
 
  ResourceAccessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-ResourceAccessTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: AccessKey
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: AccessKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: AccessKey-Index
          KeySchema:
            - AttributeName: AccessKey
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  SolutionExecutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-SolutionExecutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SolutionId
          AttributeType: S
        - AttributeName: ExecutionId
          AttributeType: S
      KeySchema:
        - AttributeName: SolutionId
          KeyType: HASH
        - AttributeName: ExecutionId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
 
  TemplatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-TemplatesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SolutionId
          AttributeType: S
        - AttributeName: Version
          AttributeType: S
      KeySchema:
        - AttributeName: SolutionId
          KeyType: HASH
        - AttributeName: Version
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  RolesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-RolesTable'
      AttributeDefinitions:
        - AttributeName: Role
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Role
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: 'true'
        RecoveryPeriodInDays: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
 
  RBACCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-RBACCustomResource"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/rbaccustomresource/rbac_custom_resource.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
 
  RBACCustomResource:
    Type: Custom::RBACCustomResource
    DependsOn:
      - RBACCustomResourceLambda
    Properties:
      ServiceToken: !GetAtt RBACCustomResourceLambda.Arn
      RolesTable: !Sub "Workbench-${pPrefix}-RolesTable"
      Changesetflag: "2025-07-02"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

# Lambda Roles
  DatasourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-UserExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
 
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DatasourcesTableAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: 
                  - !GetAtt DatasourcesTable.Arn
                  - !GetAtt ActivityLogsTable.Arn
                  - !GetAtt RolesTable.Arn
                  - !GetAtt ResourceAccessTable.Arn
                  - !Sub "${DatasourcesTable.Arn}/index/CreatedBy-DatasourceName-index"
                  - !Sub "${ResourceAccessTable.Arn}/index/AccessKey-Index"

        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3AccessToDatasourceFolder
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DatasourceBucket}
                  - !Sub arn:aws:s3:::${DatasourceBucket}/*
                  - !Sub arn:aws:s3:::${DatasourceBucket}/datasources/*

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

      Tags:
        - Key: Name
          Value: WorkbenchV2
        - Key: SWB-User
          Value: ServiceWorkbench

  QueryParserExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-QueryParserExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: QueryParserTableAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                Resource:
                  - !GetAtt DatasourcesTable.Arn
                  - !GetAtt SolutionsTable.Arn
                  - !GetAtt WorkspacesTable.Arn
                  - !GetAtt ResourceAccessTable.Arn
                  - !Sub "${DatasourcesTable.Arn}/index/DatasourceName-index"
                  - !Sub "${SolutionsTable.Arn}/index/SolutionName-index"
                  - !Sub "${WorkspacesTable.Arn}/index/WorkspaceName-index"
                  - !Sub "${ResourceAccessTable.Arn}/index/AccessKey-Index"
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowS3AccessTosolutionBucket
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::develop-service-workbench-workspaces
                  - arn:aws:s3:::develop-service-workbench-workspaces/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Name
          Value: WorkbenchV2
        - Key: SWB-User
          Value: ServiceWorkbench

# Lambdas
  RolesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-RolesLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt RolesLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          ROLES_TABLE: !Ref RolesTable
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/roles/roles_lambda.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  UsersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-UsersLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
          MISC_BUCKET: !Ref MiscBucket
          ROLES_TABLE: !Ref RolesTable
          GLUE_JOB_NAME: !Ref GlueJob
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchuserslambda/WorkbenchUsersLambda.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  DatasourcesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-DatasourcesLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DatasourceLambdaRole.Arn
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          DATASOURCE_TABLE_NAME: !Ref DatasourcesTable
          DATASOURCE_BUCKET: !Ref DatasourceBucket
          ROLES_TABLE: !Ref RolesTable
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
          RESOURCE_ACCESS_TABLE: !Ref ResourceAccessTable
          USERS_TABLE: !Ref UserTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchdatasourcelambda/WorkbenchDatasourceLambda.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  ChatLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Workspaces and Solutions Lambda Function"
      FunctionName: !Sub "${pPrefix}-ChatLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ChatLambdaRole.Arn
      Runtime: python3.12
      Timeout: 900
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchchatlambda/WorkbenchChat.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
      Environment:
        Variables:
          LOOK_UP_TABLE: !Ref BedrockAgentLookupTable
          # CHAT_TABLE: !Ref ChatHistoryTable
          CHAT_TABLE: "Wokbench-chathistory"

  ShareLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Share Lambda Function"
      FunctionName: !Sub "${pPrefix}-ShareLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt WorkspaceLambdaExecutionRole.Arn
      Runtime: python3.13
      Timeout: 600
      Environment:
        Variables:
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
          SOLUTIONS_TABLE: !Ref SolutionsTable
          WORKSPACES_TABLE: !Ref WorkspacesTable
          RESOURCE_ACCESS_TABLE: !Ref ResourceAccessTable
          ROLES_TABLE: !Ref RolesTable
          USER_TABLE_NAME: !Ref UserTable
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/sharelambda/ShareLambda.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"
  
  QueryParserLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Query Parser Lambda Function"
      FunctionName: !Sub "${pPrefix}-QueryParserLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt QueryParserExecutionRole.Arn
      Runtime: python3.12
      Timeout: 900
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Environment:
        Variables:
          DATASOURCE_TABLE_NAME: !Ref DatasourcesTable
          SOLUTION_TABLE_NAME: !Ref SolutionsTable
          WORKSPACE_TABLE_NAME: !Ref WorkspacesTable
          RESOURCE_ACCESS_TABLE: !Ref ResourceAccessTable
          SOLUTION_BUCKET_NAME: "develop-service-workbench-workspaces"
          USERS_TABLE: !Ref UserTable
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/workbenchqueryparseragentlambda/WorkbenchQueryParserAgent.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  ArchitectureAgentAGLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !ImportValue WorkspacesBucketArn
                  - !Sub
                    - "${BucketArn}/*"
                    - {BucketArn: !ImportValue WorkspacesBucketArn}
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !ImportValue WorkspacesBucketArn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  ArchitectureAgentAGLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "${DeploymentTrigger} - Architecture Agent AG Lambda Function"
      FunctionName: !Sub "${pPrefix}-architecture-generation-lambda"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ArchitectureAgentAGLambdaRole.Arn
      Runtime: python3.12
      Timeout: 900
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Environment:
        Variables:
          WORKSPACES_BUCKET: !ImportValue "WorkspacesBucket"
          SOLUTIONS_TABLE: !Ref "SolutionsTable"
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/architecutureagentag/ArchitectureAgentAG.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  ArchitectureAgentAGLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ArchitectureAgentAGLambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  CodeGeneartorAgentAGLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CodeGenerationLambda
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  CFTGeneartorAgentAGLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CFTGenerationAgentLambda
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*


# Lambda Permission for API Gateway to invoke Roles Lambda
  QueryParserLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QueryParserLambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  RolesLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RolesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*
     
  UsersLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UsersLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*
  
  DatasourcesLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DatasourcesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*

  ShareLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ShareLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*

  VectorKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Sub "${pPrefix}-KnowledgeBase"
      Description: "Stores vectorized data in OpenSearch"
      RoleArn: !ImportValue "CustomResourceLambdaRoleARN"
      StorageConfiguration:
        Type: OPENSEARCH_MANAGED_CLUSTER
        OpensearchManagedClusterConfiguration:
          DomainArn: !ImportValue "OpenSearchDBArn"
          DomainEndpoint: !Join
            - ""
            - - "https://"
              - !ImportValue "OpenSearchEndpoint"
          FieldMapping: 
            VectorField: "bedrock-knowledge-base-default-vector"  
            TextField: "AMAZON_BEDROCK_TEXT_CHUNK"               
            MetadataField: "AMAZON_BEDROCK_METADATA"  
          VectorIndexName: !Sub "${pPrefix}_vector_index"
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v2:0"

  AuroraKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Sub "${pPrefix}-AuroraKB"
      Description: "Knowledge base using Aurora PostgreSQL"
      RoleArn: !ImportValue "CustomResourceLambdaRoleARN"
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: "arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0"
      StorageConfiguration:
        Type: "RDS"
        RdsConfiguration:
          ResourceArn: !ImportValue "AuroraDBClusterARN"
          CredentialsSecretArn: !ImportValue "AuroraDBSecretARN"
          DatabaseName: !ImportValue "AuroraDBName"
          TableName: !Sub "${pRAGPrefix}_aurora_table" 
          FieldMapping:
            VectorField: "embedding"
            TextField: "content"
            MetadataField: "metadata"
            PrimaryKeyField: "id" 

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${pPrefix}-Workbench-WebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  IntegrationSendMessage:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}/invocations
        - {FunctionName: !Ref ChatLambdaFunction}
      IntegrationMethod: POST
      ConnectionType: INTERNET
      PayloadFormatVersion: "1.0"
      PassthroughBehavior: WHEN_NO_MATCH

  IntegrationConnect:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}/invocations
        - {FunctionName: !Ref ChatLambdaFunction}
      IntegrationMethod: POST
      ConnectionType: INTERNET
      PayloadFormatVersion: "1.0"
      PassthroughBehavior: WHEN_NO_MATCH

  IntegrationDisconnect:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}/invocations
        - {FunctionName: !Ref ChatLambdaFunction}
      IntegrationMethod: POST
      ConnectionType: INTERNET
      PayloadFormatVersion: "1.0"
      PassthroughBehavior: WHEN_NO_MATCH
      
  RouteConnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketAuthorizer
      Target: !Join ["/", ["integrations", !Ref IntegrationConnect]]

  RouteDisconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref IntegrationDisconnect]]

  RouteSendMessage:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendMessage
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref IntegrationSendMessage]]


  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - RouteConnect
      - RouteDisconnect
      - RouteSendMessage
    Properties:
      ApiId: !Ref WebSocketApi
  
  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub "${pPrefix}-WebSocketAuthorizer"
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      IdentitySource:
        - route.request.querystring.token
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FunctionName}/invocations
        - {FunctionName: !Ref LambdaAuthorizerFunction}

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref pWebSocketStage
      AutoDeploy: true
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi
      DefaultRouteSettings:
        DataTraceEnabled: false
        DetailedMetricsEnabled: false
        LoggingLevel: OFF

  AuthorizerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaAuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
        - WebSocketApi: !Ref WebSocketApi

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WorkbenchLambdaAuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaAuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*    

  # CFTGenerationAgentLambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub "${pPrefix}-CFTGenerationAgentLambdaRole"
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AdministratorAccess
  #     Tags:
  #       - Key: Name
  #         Value: "WorkbenchV2"

  CFTGenerationAgentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pPrefix}-CFTGenerationAgentLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::develop-service-workbench-workspaces/*"
                  - !Sub "arn:aws:s3:::develop-service-workbench-workspaces"
      
        - PolicyName: ServiceCatalogAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - servicecatalog:CreateProduct
                  - servicecatalog:AssociateProductWithPortfolio
                  - servicecatalog:ProvisionProduct
                  - servicecatalog:DescribeRecord
                  - servicecatalog:DescribeProvisionedProduct
                Resource: "*"
      
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResources
                Resource: "*"
      
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*"
      
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock-agent-runtime:InvokeAgent
                Resource: "*"
      
        - PolicyName: StepFunctionsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                Resource: "*"
      
        - PolicyName: STSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: "*"
    
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess
    
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  CFTGenerationAgentLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-CFTGenerationAgentLambda"
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt CFTGenerationAgentLambdaRole.Arn
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Sub "${pPrefix}"
          SOLUTIONS_TABLE: !Ref SolutionsTable
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: !Sub "lambda-${LambdaArtifactVersion}-${pPrefix}/cftgenerationagentlambda/CFTGenerationAgentLambda.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-ChatHistory'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ChatId
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
        - AttributeName: MessageId
          AttributeType: S
      KeySchema:
        - AttributeName: ChatId
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: MessageIdIndex
          KeySchema:
            - AttributeName: MessageId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
        - Key: SWB-User
          Value: "ServiceWorkbench"

  DailyMidnightScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'Workbench-${pPrefix}-AuroraEB'
      Description: Triggers Lambda function daily at 12:00 AM UTC (Monday-Saturday)
      ScheduleExpression: 'cron(0 0 ? * MON-SAT *)'
      State: DISABLED
      Targets:
        - Arn: !GetAtt UsersLambda.Arn
          Id: DailyMidnightLambdaTarget
          Input: !Sub |
            {
              "action": "app"
            }

  SundayMidnightScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'Workbench-${pPrefix}-EB'
      Description: Triggers Lambda function every Sunday at 12:00 AM UTC with special parameters
      ScheduleExpression: 'cron(0 0 ? * SUN *)'
      State: DISABLED
      Targets:
        - Arn: !GetAtt UsersLambda.Arn
          Id: SundayMidnightLambdaTarget
          Input: !Sub |
            {
              "action": "docsapp"
            }

  DailyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UsersLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyMidnightScheduleRule.Arn

  SundayLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UsersLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SundayMidnightScheduleRule.Arn



Outputs:

  WorkspaceLambdaFunctionName:
    Description: Name of the Workspace Lambda function
    Value: !Ref WorkspacesAndSolutionsLambdaFunction
  ApiUrl:
    Description: "Invoke URL for the deployed API"
    Value: !Sub "https://${WorkbenchApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  CloudfrontDistributionId:
    Description: CloudFront distribution ID
    Value: !GetAtt WebsiteDistribution.Id
    Export:
      Name: !Sub "${pPrefix}-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt WebsiteDistribution.DomainName
    Export:
      Name: !Sub "${pPrefix}-CloudFrontDomainName"
    
  CognitoUserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${pPrefix}-CognitoUserPoolId"

  CognitoAppClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${pPrefix}-CognitoAppClientId"

  CognitoRegion:
    Value: !Ref "AWS::Region"
    Export:
      Name: !Sub "${pPrefix}-Region"

  WebSocketApiUrl:
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${pWebSocketStage}"
    Export:
      Name: !Sub "${pPrefix}-WebSocketApiUrl"
    
  CognitoUserPoolDomainURL:
    Value: !Sub "${pPrefix}-${AWS::AccountId}-auth"
    Export:
      Name: !Sub "${pPrefix}-CognitoUserPoolDomainURL"
