---
AWSTemplateFormatVersion: '2010-09-09'
Description: Development cloudFormation template for the Service Workbench V2

Parameters:
  pPrefix:
    Type: String
    Description: Prefix for Lambda function naming
  ApiName:
    Type: String
    Default: WorkbenchAPI
    Description: Name of the API Gateway API
  VPCPrefix:
    Type: String
    Default: WorkbenchVPC
    Description: Environment name prefix for VPC resources

Resources:

  WorkspaceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-workspaces-lambda"
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}

  WorkbenchApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      BodyS3Location:
        Bucket: service-workbench-artifacts
        Key: develop/swagger.yaml
      FailOnWarnings: true

  WorkspaceLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkspaceLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*

  WorkbenchApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WorkbenchApi
      StageName: test

  WorkbenchApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref WorkbenchApi
      DeploymentId: !Ref WorkbenchApiDeployment
      StageName: prod
      Description: test stage
      
  OpenSearchClusterCustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt OpenSearchClusterLambda.Arn
      changesetflag: '20'
      IAMRole: !GetAtt AgentsRole.Arn
      OS_ENDPOINT: !GetAtt OpenSearchDB.DomainEndpoint
      IndexName: "aws-docs-vector-index"
      ClusterARN: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraDBCluster}"
      DatabaseName: !Ref pDatabaseName
      SecretARN: !GetAtt AuroraDBCluster.MasterUserSecret.SecretArn      #rds.secret!.secretArn

 KnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WorkBenchAgnetIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
        - PolicyName: AccessOpensearch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'es:*'
                Resource: '*'

  RolesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-RolesTable'
      AttributeDefinitions:
        - AttributeName: Role
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Role
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RBACCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-RBACCustomResource"
      Handler: lambda_function.lambda_handler
      Role: !ImportValue WorkbenchCustomResourceLambdaExecutionRole
      Runtime: python3.12
      Timeout: 900
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: service-workbench-artifacts
        S3Key: lambda/rbaccustomresource/rbac_custom_resource.zip
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RBACCustomResource:
    Type: Custom::RBACCustomResource
    DependsOn:
      - RBACCustomResourceLambda
    Properties:
      ServiceToken: !GetAtt RBACCustomResourceLambda.Arn
      RolesTable: !Sub "${pPrefix}-RolesTable"
      Changesetflag: "2025-07-02"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RolesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-RolesLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !ImportValue RolesLambdaFunctionRole
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          ROLES_TABLE: !Sub "${pPrefix}-RolesTable"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: service-workbench-artifacts
        S3Key: lambda/roles/roles_lambda.zip
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RolesLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RolesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref SampleLambdaFunction

  ApiUrl:
    Description: "Invoke URL for the deployed API"
    Value: !Sub "https://${WorkbenchApi}.execute-api.${AWS::Region}.amazonaws.com/prod"