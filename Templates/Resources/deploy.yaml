AWSTemplateFormatVersion: '2010-09-09'
Description: Development cloudFormation template for the Service Workbench V2

Parameters:
  pPrefix:
    Type: String
    Default: 'dev'
    Description: 'Prefix for resource naming (dev, staging, prod)'
  ApiName:
    Type: String
    Default: WorkbenchAPI
    Description: Name of the API Gateway API
  VPCPrefix:
    Type: String
    Default: WorkbenchVPC
    Description: Environment name prefix for VPC resources
  DeploymentTrigger:
    Type: String
    Description: time

Resources:

  WorkspaceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-workspaces-lambda"
      Handler: index.handler
      Role: !ImportValue WorkspaceLambdaExecutionRole
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # API Gateway
  WorkbenchApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      BodyS3Location:
        Bucket: service-workbench-artifacts
        Key: develop/swagger.yaml
      FailOnWarnings: true

  WorkspaceLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkspaceLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*'

  # API Gateway Deployment
  WorkbenchApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: WorkspaceLambdaInvokePermission
    Properties:
      RestApiId: !Ref WorkbenchApi
      Description: "Deployment triggered on template update"

  WorkbenchApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref WorkbenchApi
      DeploymentId: !Ref WorkbenchApiDeployment
      StageName: prod
      Variables:
        redeployHash: !Sub "${DeploymentTrigger}"

  # DynamoDB Tables
  WorkspacesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-WorkspacesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  SolutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-SolutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
        - AttributeName: SolutionId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
        - AttributeName: SolutionId
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  DatasourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-DatasourcesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DatasourceId
          AttributeType: S
      KeySchema:
        - AttributeName: DatasourceId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  ResourceAccessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-ResourceAccessTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: AccessKey
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: AccessKey
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  SolutionExecutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-SolutionExecutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ExecutionId
          AttributeType: S
      KeySchema:
        - AttributeName: ExecutionId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RolesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-RolesTable'
      AttributeDefinitions:
        - AttributeName: Role
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Role
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RBACCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-RBACCustomResource"
      Handler: lambda_function.lambda_handler
      Role: !ImportValue WorkbenchCustomResourceLambdaExecutionRole
      Runtime: python3.12
      Timeout: 900
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: service-workbench-artifacts
        S3Key: lambda/rbaccustomresource/rbac_custom_resource.zip
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RBACCustomResource:
    Type: Custom::RBACCustomResource
    DependsOn:
      - RBACCustomResourceLambda
    Properties:
      ServiceToken: !GetAtt RBACCustomResourceLambda.Arn
      RolesTable: !Sub "Workbench-${pPrefix}-RolesTable"
      Changesetflag: "2025-07-02"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RolesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-RolesLambdaFunction"
      Handler: lambda_function.lambda_handler
      Role: !ImportValue RolesLambdaFunctionRole
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          ROLES_TABLE: !Sub "${pPrefix}-RolesTable"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Layers:
        - !ImportValue ServiceWorkbenchLambdaLayer
      Code:
        S3Bucket: service-workbench-artifacts
        S3Key: lambda/roles/roles_lambda.zip
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RolesLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RolesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*

Outputs:

  WorkspaceLambdaFunctionName:
    Description: Name of the Workspace Lambda function
    Value: !Ref WorkspaceLambdaFunction

  ApiUrl:
    Description: "Invoke URL for the deployed API"
    Value: !Sub "https://${WorkbenchApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
