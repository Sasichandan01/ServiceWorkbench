AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudBench Core Infrastructure - Lambda, API Gateway, DynamoDB Tables'

Parameters:
  pPrefix:
    Type: String
    Default: 'dev'
    Description: 'Prefix for resource naming (dev, staging, prod)'
  ApiName:
    Type: String
    Default: WorkbenchAPI
    Description: Name of the API Gateway API
  VPCPrefix:
    Type: String
    Default: WorkbenchVPC
    Description: Environment name prefix for VPC resources

Resources:
  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt WorkspacesTable.Arn
                  - !GetAtt SolutionsTable.Arn
                  - !GetAtt DatasourcesTable.Arn
                  - !GetAtt ResourceAccessTable.Arn
                  - !GetAtt SolutionExecutionsTable.Arn
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # Lambda Functions
  SampleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-sample-lambda"
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  WorkspaceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-workspaces-lambda"
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # API Gateway
  WorkbenchApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      BodyS3Location:
        Bucket: develop-service-workbench-artifacts
        Key: develop/swagger.yaml
      FailOnWarnings: true
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  WorkspaceLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkspaceLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*

  WorkbenchApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WorkbenchApi
      StageName: test

  WorkbenchApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref WorkbenchApi
      DeploymentId: !Ref WorkbenchApiDeployment
      StageName: prod
      Description: test stage
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # DynamoDB Tables
  WorkspacesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${pPrefix}-WorkspacesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  SolutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${pPrefix}-SolutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
        - AttributeName: SolutionId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
        - AttributeName: SolutionId
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  DatasourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${pPrefix}-DatasourcesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DatasourceId
          AttributeType: S
      KeySchema:
        - AttributeName: DatasourceId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  ResourceAccessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${pPrefix}-ResourceAccessTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: AccessKey
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: AccessKey
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  SolutionExecutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${pPrefix}-SolutionExecutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ExecutionId
          AttributeType: S
      KeySchema:
        - AttributeName: ExecutionId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref SampleLambdaFunction

  ApiUrl:
    Description: "Invoke URL for the deployed API"
    Value: !Sub "https://${WorkbenchApi}.execute-api.${AWS::Region}.amazonaws.com/prod"