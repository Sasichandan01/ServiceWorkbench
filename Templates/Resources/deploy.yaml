AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudBench Core Infrastructure - Lambda, API Gateway, DynamoDB Tables'

Parameters:
  pPrefix:
    Type: String
    Default: 'dev'
    Description: 'Prefix for resource naming (dev, staging, prod)'
  ApiName:
    Type: String
    Default: WorkbenchAPI
    Description: Name of the API Gateway API
  VPCPrefix:
    Type: String
    Default: WorkbenchVPC
    Description: Environment name prefix for VPC resources

Resources:

  # Lambda Functions
  SampleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-sample-lambda"
      Handler: index.handler
      Role: !ImportValue WorkbenchV2-LambdaExecutionRole
      Runtime: python3.12
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  WorkspaceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pPrefix}-workspaces-lambda"
      Handler: index.handler
      Role: !ImportValue WorkbenchV2-LambdaExecutionRole
      Runtime: python3.12
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-1-ID"
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Private-Subnet-2-ID"
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${VPCPrefix}-Lambda-SG-ID"
      Code:
        ZipFile: |
          def handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # API Gateway
  WorkbenchApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      Description: "Workbench API Gateway"
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # API Gateway Resources and Methods
  WorkbenchApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WorkbenchApi
      ResourceId: !GetAtt WorkbenchApi.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SampleLambdaFunction.Arn}/invocations'

  WorkspaceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref WorkbenchApi
      ParentId: !GetAtt WorkbenchApi.RootResourceId
      PathPart: workspaces

  WorkspaceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref WorkbenchApi
      ResourceId: !Ref WorkspaceResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WorkspaceLambdaFunction.Arn}/invocations'

  # Lambda Permissions
  SampleLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SampleLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*'

  WorkspaceLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkspaceLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WorkbenchApi}/*/*/*'

  # API Gateway Deployment
  WorkbenchApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WorkbenchApiRootMethod
      - WorkspaceMethod
    Properties:
      RestApiId: !Ref WorkbenchApi
      Description: "Initial deployment"

  WorkbenchApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref WorkbenchApi
      DeploymentId: !Ref WorkbenchApiDeployment
      StageName: prod
      Description: "Production stage"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # DynamoDB Tables
  WorkspacesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-WorkspacesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  SolutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-SolutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: WorkspaceId
          AttributeType: S
        - AttributeName: SolutionId
          AttributeType: S
      KeySchema:
        - AttributeName: WorkspaceId
          KeyType: HASH
        - AttributeName: SolutionId
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  DatasourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-DatasourcesTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: DatasourceId
          AttributeType: S
      KeySchema:
        - AttributeName: DatasourceId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  ResourceAccessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-ResourceAccessTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: AccessKey
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: AccessKey
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  SolutionExecutionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'Workbench-${pPrefix}-SolutionExecutionsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ExecutionId
          AttributeType: S
      KeySchema:
        - AttributeName: ExecutionId
          KeyType: HASH
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

Outputs:
  SampleLambdaFunctionName:
    Description: Name of the Sample Lambda function
    Value: !Ref SampleLambdaFunction

  WorkspaceLambdaFunctionName:
    Description: Name of the Workspace Lambda function
    Value: !Ref WorkspaceLambdaFunction

  ApiUrl:
    Description: "Invoke URL for the deployed API"
    Value: !Sub "https://${WorkbenchApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

  ApiId:
    Description: "API Gateway ID"
    Value: !Ref WorkbenchApi

  WorkspacesTableName:
    Description: "Name of the Workspaces DynamoDB table"
    Value: !Ref WorkspacesTable

  SolutionsTableName:
    Description: "Name of the Solutions DynamoDB table"
    Value: !Ref SolutionsTable