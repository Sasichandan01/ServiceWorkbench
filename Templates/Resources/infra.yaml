AWSTemplateFormatVersion: '2010-09-09'
Description: Service Workbench V2 Infrastructure with VPC

Parameters:
  pApplicationPrefix:
    Type: String
    Default: "wb-WorkBench"
    Description: Prefix for the application resources
  
  pArtifactsBucketName:
    Type: String
    Default: "service-workbench-artifacts"
    Description: Name of the S3 bucket for artifacts
  
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  
  VPCPrefix:
    Type: String
    Default: WorkbenchVPC
    Description: Environment name prefix for VPC resources

  pDatabaseName: 
    Type: String
    Default: workbenchdb
    Description: Database name for Aurora

Resources:

  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-Subnet-AZ1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-Subnet-AZ2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-Subnet-AZ1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-Subnet-AZ2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-NAT-EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-NAT-Gateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-Routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-NACL

  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-NACL

  # Public NACL Rules
  PublicNACLInboundAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  PublicNACLOutboundAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # Private NACL Rules
  PrivateNACLInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  PrivateNACLInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  PrivateNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PrivateNACLInboundVPCTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 120
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref VPCCidr

  PrivateNACLOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  PrivateNACLOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
 
  PrivateNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PrivateNACLOutboundVPCTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 120
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref VPCCidr
        
  # NACL Subnet Associations
  AssociatePrivateNACLSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNACL

  AssociatePrivateNACLSubnet2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNACL

  AssociatePublicNACLSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNACL

  AssociatePublicNACLSubnet2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNACL

  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Lambdas
      GroupName: !Sub ${VPCPrefix}-Lambda-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VPCCidr
          Description: HTTPS from VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS to internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP to internet
      Tags: 
        - Key: Name
          Value: !Sub ${VPCPrefix}-Lambda-SG
      VpcId: !Ref VPC

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Endpoints
      GroupName: !Sub ${VPCPrefix}-Endpoint-SG
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: HTTPS from Lambda SG
      Tags: 
        - Key: Name
          Value: !Sub ${VPCPrefix}-Endpoint-SG
      VpcId: !Ref VPC  

  # VPC Endpoints
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-S3-Endpoint

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-DynamoDB-Endpoint

  # S3 bucket for artifacts
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-website"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # S3 bucket for logs
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  WorkspacesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-workspaces"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Name
          Value: "WorkbenchV2"


  ServiceWorkbenchLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: "ServiceWorkbenchLambdaLayer"
      Description: "Service Workbench Lambda Layer"
      Content:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: layer/layer.zip
      CompatibleRuntimes:
        - python3.12

  OpenSearchDB:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub "${pApplicationPrefix}-opensearchdb"
      EngineVersion: 'OpenSearch_2.17'
      ClusterConfig:
        InstanceCount: 3
        InstanceType: t3.small.search
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig: 
          AvailabilityZoneCount: 3
        WarmEnabled: false
        MultiAZWithStandbyEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp3
        VolumeSize: 10
        Iops: 3000
        Throughput: 125
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"             
            Action: "es:*"
            Resource: "*"
      AdvancedOptions:
        indices.fielddata.cache.size: "20"
        rest.action.multi.allow_explicit_index: "true"
        indices.query.bool.max_clause_count: "1024"
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !GetAtt RAGCustomResourceLambdaRole.Arn
      OffPeakWindowOptions:
        Enabled: true
        OffPeakWindow: 
          WindowStartTime: 
            Hours: 0
            Minutes: 0
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      IPAddressType: dualstack
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RAGCustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pApplicationPrefix}-RAGCustomResourceLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VectorStoreAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "es:ESHttp*"
                  - "es:DescribeDomain"
                  - "es:ListDomainNames"
                  - "rds-data:ExecuteStatement"
                  - "rds-data:BatchExecuteStatement"
                  - "rds:DescribeDBClusters"
                  - "secretsmanager:GetSecretValue"
                  - "bedrock:InvokeModel"
                  - "bedrock:Retrieve"
                  - "bedrock:RetrieveAndGenerate"
                  - "bedrock:CreateKnowledgeBase"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RAGCustomResourcePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ClusterAccessPolicy
      Roles:
        - !Ref RAGCustomResourceLambdaRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - es:ESHttpGet
              - es:ESHttpPost
              - es:ESHttpPut
              - es:ESHttpDelete
              - es:ESHttpHead
            Resource:
              - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDB}/*"
          - Effect: Allow
            Action:
              - rds-data:ExecuteStatement
              - rds-data:BatchExecuteStatement
              - rds-data:BeginTransaction
              - rds-data:CommitTransaction
              - rds-data:RollbackTransaction
            Resource:
              - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraDBCluster}"
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !GetAtt AuroraDBCluster.MasterUserSecret.SecretArn

  RAGCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      FunctionName: !Sub "${pApplicationPrefix}-RAGCustomResourceLambda"
      Timeout: 900
      Role: !GetAtt RAGCustomResourceLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Code: 
        S3Bucket: service-workbench-artifacts
        S3Key: lambda/ragcustomresourcelambda/rag_custom_resource_lambda.zip
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Layers:
        - !Ref ServiceWorkbenchLambdaLayer
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  AuroraSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Private Subnets for Aurora DB"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 7
      DatabaseName: !Ref pDatabaseName
      DBClusterIdentifier: !Sub "${pApplicationPrefix}-auroradbcluster"
      DBClusterParameterGroupName: default.aurora-postgresql15
      DeletionProtection: false
      EnableIAMDatabaseAuthentication: true
      EnableHttpEndpoint: true
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: 15.4
      MasterUsername: postgres
      ManageMasterUserPassword: true
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      VpcSecurityGroupIds:
        - !Ref EndpointSecurityGroup
      NetworkType: IPV4
      StorageType: aurora
      PerformanceInsightsEnabled: true
      PerformanceInsightsRetentionPeriod: 7
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 2
      Port: 5432
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  AuroraDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${pApplicationPrefix}-auroradbclusterinstance"
      DBClusterIdentifier: !Ref AuroraDBCluster
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      EnablePerformanceInsights: true
      PubliclyAccessible: false
      PerformanceInsightsRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  OpenSearchClusterCustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt RAGCustomResourceLambda.Arn
      changesetflag: '25'
      OS_ENDPOINT: !GetAtt OpenSearchDB.DomainEndpoint
      ClusterARN: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraDBCluster}"
      DatabaseName: !Ref pDatabaseName
      SecretARN: !GetAtt AuroraDBCluster.MasterUserSecret.SecretArn

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${VPCPrefix}-VPC-ID

  VPCCidr:
    Description: VPC CIDR Block
    Value: !Ref VPCCidr
    Export:
      Name: !Sub ${VPCPrefix}-VPC-CIDR

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${VPCPrefix}-Public-Subnet-1-ID

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${VPCPrefix}-Public-Subnet-2-ID

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${VPCPrefix}-Private-Subnet-1-ID

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${VPCPrefix}-Private-Subnet-2-ID

  LambdaSecurityGroupId:
    Description: Lambda Security Group ID
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${VPCPrefix}-Lambda-SG-ID

  EndpointSecurityGroupId:
    Description: Endpoint Security Group ID
    Value: !Ref EndpointSecurityGroup
    Export:
      Name: !Sub ${VPCPrefix}-Endpoint-SG-ID

  NATGatewayId:
    Description: NAT Gateway ID
    Value: !Ref NatGateway
    Export:
      Name: !Sub ${VPCPrefix}-NAT-Gateway-ID

  WebsiteBucketName:
    Description: Website bucket name
    Value: !Ref WebsiteBucket
    Export:
      Name: "WebsiteBucketName"

  WebsiteBucketArn:
    Description: Website bucket ARN
    Value: !GetAtt WebsiteBucket.Arn
    Export:
      Name: "WebsiteBucketArn"

  WebsiteBucketRegionalDomainName:
    Description: Website bucket regional domain name
    Value: !GetAtt WebsiteBucket.RegionalDomainName
    Export:
      Name: "WebsiteBucketRegionalDomainName"

  LogsBucketDomainName:
    Description: Logs bucket domain name
    Value: !GetAtt LogsBucket.DomainName
    Export:
      Name: "LogsBucketDomainName"

  LogsBucketName:
    Description: Name of the logs S3 bucket
    Value: !Ref LogsBucket
    Export:
      Name: "LogsBucketName"

  LogsBucketArn:
    Description: Logs bucket ARN
    Value: !GetAtt LogsBucket.Arn
    Export:
      Name: "LogsBucketArn"

  WorkspacesBucketName:
    Description: Name of workspaces S3 bucket
    Value: !Ref WorkspacesBucket
    Export:
      Name: "WorkspacesBucket"
  
  WorkspacesBucketArn:
    Description: Workspaces bucket ARN
    Value: !GetAtt WorkspacesBucket.Arn
    Export:
      Name: "WorkspacesBucketArn"

  ServiceWorkbenchLambdaLayer:
    Description: Name of the service workbench lambda layer
    Value: !Ref ServiceWorkbenchLambdaLayer
    Export:
      Name: "ServiceWorkbenchLambdaLayer"

  OpenSearchDBEndpoint:
    Value: !GetAtt OpenSearchDB.DomainEndpoint
    Description: The endpoint of the OpenSearch cluster
    Export:
      Name: "OpenSearchEndpoint"

  OpenSearchDBArn:
    Value: !GetAtt OpenSearchDB.Arn
    Description: The ARN of the OpenSearch cluster
    Export:
      Name: "OpenSearchDBArn"

  RAGCustomResourceLambdaRole:
    Value: !GetAtt RAGCustomResourceLambdaRole.Arn
    Description: The ARN of the custom resource lambda role
    Export:
      Name: "CustomResourceLambdaRoleARN"

  AuroraDBClusterARN:
    Value: !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${AuroraDBCluster}"
    Description: The ARN of the Aurora DB cluster
    Export:
      Name: "AuroraDBClusterARN"

  AuroraDBClusterSecret:
    Value: !GetAtt AuroraDBCluster.MasterUserSecret.SecretArn
    Description: The secret ARN for the Aurora DB cluster
    Export:
      Name: "AuroraDBSecretARN"

  AuroraDBName:
    Value: !Ref pDatabaseName
    Description: The name of the database
    Export:
      Name: "AuroraDBName"
