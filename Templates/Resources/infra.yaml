AWSTemplateFormatVersion: '2010-09-09'
Description: Service Workbench V2 Infrastructure with VPC

Parameters:
  pApplicationPrefix:
    Type: String
    Default: "wb-WorkBench"
    Description: Prefix for the application resources
  
  pArtifactsBucketName:
    Type: String
    Default: "service-workbench-artifacts"
    Description: Name of the S3 bucket for artifacts
  
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  
  VPCPrefix:
    Type: String
    Default: WorkbenchVPC
    Description: Environment name prefix for VPC resources

Resources:

  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-Subnet-AZ1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-Subnet-AZ2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-Subnet-AZ1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-Subnet-AZ2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-NAT-EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-NAT-Gateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-Routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Public-NACL

  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-Private-NACL

  # Public NACL Rules
  PublicNACLInboundAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  PublicNACLOutboundAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # Private NACL Rules
  PrivateNACLInboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  PrivateNACLInboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  PrivateNACLInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PrivateNACLInboundVPCTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 120
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref VPCCidr

  PrivateNACLOutboundHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  PrivateNACLOutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
 
  PrivateNACLOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PrivateNACLOutboundVPCTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: 120
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref VPCCidr
        
  # NACL Subnet Associations
  AssociatePrivateNACLSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNACL

  AssociatePrivateNACLSubnet2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNACL

  AssociatePublicNACLSubnet1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNACL

  AssociatePublicNACLSubnet2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNACL

  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Lambdas
      GroupName: !Sub ${VPCPrefix}-Lambda-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VPCCidr
          Description: HTTPS from VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS to internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP to internet
      Tags: 
        - Key: Name
          Value: !Sub ${VPCPrefix}-Lambda-SG
      VpcId: !Ref VPC

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Endpoints
      GroupName: !Sub ${VPCPrefix}-Endpoint-SG
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: HTTPS from Lambda SG
      Tags: 
        - Key: Name
          Value: !Sub ${VPCPrefix}-Endpoint-SG
      VpcId: !Ref VPC  

  # VPC Endpoints
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-S3-Endpoint

  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: !Sub ${VPCPrefix}-DynamoDB-Endpoint

  # S3 bucket for artifacts
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-website"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # S3 bucket for logs
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# CloudFront Origin Access Control (OAC)
  WebsiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${pApplicationPrefix}-service-workbench-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

# CloudFront Distribution
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref WebsiteOAC
            OriginPath: /web
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Logging:
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: cloudfront-logs/
          IncludeCookies: false
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

# S3 Bucket Policy to allow CloudFront OAC access only
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

# Bucket policy to allow CloudFront to write logs
  CloudFrontLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${LogsBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt LogsBucket.Arn
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

# Cognito User Pool and Client
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${pApplicationPrefix}-UserPool"
      AliasAttributes:
        - email
        - preferred_username
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: preferred_username
          AttributeDataType: String
          Required: false
          Mutable: true
      AutoVerifiedAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailSubject: "Your temporary password for WorkBench"
          EmailMessage: "Your username is {username} and temporary password is {####}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Your verification code for WorkBench"
        EmailMessage: "Your verification code is {####}"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${pApplicationPrefix}-Client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "${pApplicationPrefix}-${AWS::AccountId}-auth"
      ManagedLoginVersion: "2"

# IAM Role for the Custom Resource Lambda
  CustomResourceExecutionRoles:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:UpdateUserPool
                Resource: !GetAtt UserPool.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

#Lambda Roles
  UserExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        
        - PolicyName: SQSPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SQSPutPolicies
                Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt CleanupQueue.Arn
        
        - PolicyName: DynamoDBPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBUserTableAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserTable}"
              - Sid: DynamoDBActivityLogsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ActivityLogsTable}"
        
        - PolicyName: CognitoPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CognitoAccess
                Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
        
        - PolicyName: SESPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SESAccess
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
        
        - PolicyName: SSMPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SSMAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"


#DynamoDB Tables
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${pApplicationPrefix}-UserTable"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
  
  ActivityLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${pApplicationPrefix}-ActivityLogsTable"
      AttributeDefinitions:
        - AttributeName: LogId
          AttributeType: S
      KeySchema:
        - AttributeName: LogId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# DLQ for failed messages
  CleanupDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${pApplicationPrefix}-CleanupDLQ"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
    
# Lambda Function for Cognito Triggers Custom Resource
  CognitoTriggersCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-CognitoTriggersCustomResource"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !GetAtt CustomResourceExecutionRoles.Arn
      Timeout: 300
      MemorySize: 128
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambda/workbenchcognitocustomresourcelambda/WorkbenchCognitoCustomResource.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# Custom Resource Definition
  CognitoTriggersResource:
    Type: Custom::CognitoTriggers
    Properties:
      ServiceToken: !GetAtt CognitoTriggersCustomResource.Arn
      UserPoolId: !Ref UserPool
      PreSignUpLambdaArn: !GetAtt PreSignUpFunction.Arn
      PreAuthLambdaArn: !GetAtt PreAuthFunction.Arn
      PreTokenLambdaArn: !GetAtt PreTokenGenerationFunction.Arn
      PostConfirmationLambdaArn: !GetAtt PostConfirmationFunction.Arn
      PostAuthLambdaArn: !GetAtt PostAuthFunction.Arn
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

#Lambdas
  PreSignUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreSignUp"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambda/workbenchpresignuplambda/WorkbenchPresignup.zip"
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
      Layers:
        - !Ref ServiceWorkbenchLambdaLayer
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PreAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreAuth"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambda/workbenchpreauthlambda/WorkbenchPreAuth.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PreTokenGenerationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreTokenGen"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambda/workbenchpretokengenerationlambda/WorkbenchPreTokengeneration.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PostConfirmationFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${pApplicationPrefix}-PostConfirm"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambda/workbenchpostconfirmationlambda/WorkbenchPostConfirmation.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
          DOMAIN: "ServiceWorkbench v2.0"
          SOURCE_EMAIL: "mayank.gupta@cloudwick.com"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PostAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PostAuth"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !GetAtt UserExecutionRole.Arn
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambda/workbenchpostauthlambda/WorkbenchPostAuth.zip"
      Environment:
        Variables:
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  UserPoolCleanUp:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-Workbench-UserPool"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !GetAtt UserExecutionRole.Arn
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambda/workbenchuserpoolcleanuplambda/WorkbenchUserpoolCleanup.zip"
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
          USER_POOL_ID: !Ref UserPool
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

#Permissions for Lambda to call Cognito
  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreTokenPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PostConfirmPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PostAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

# Event Source Mapping for Cleanup Queue
  CleanupQueueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt CleanupQueue.Arn
      FunctionName: !GetAtt UserPoolCleanUp.Arn
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# Main SQS queue with redrive policy
  CleanupQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${pApplicationPrefix}-CleanupQueue"
      VisibilityTimeout: 65
      ReceiveMessageWaitTimeSeconds: 20
      DelaySeconds: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CleanupDLQ.Arn
        maxReceiveCount: 5  # Message is sent to DLQ after 5 failed receives
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  ServiceWorkbenchLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: "ServiceWorkbenchLambdaLayer"
      Description: "Service Workbench Lambda Layer"
      Content:
        S3Bucket: service-workbench-artifacts
        S3Key: layer/layer.zip
        # S3Bucket: "mayank-swb"
        # S3Key: "layers.zip"
      CompatibleRuntimes:
        - python3.12

  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pApplicationPrefix}-WorkbenchCustomResourceLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  RolesLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pApplicationPrefix}-RolesLambdaFunctionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
    
  WorkspaceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${pApplicationPrefix}-WorkspaceLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Workbench-*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${VPCPrefix}-VPC-ID

  VPCCidr:
    Description: VPC CIDR Block
    Value: !Ref VPCCidr
    Export:
      Name: !Sub ${VPCPrefix}-VPC-CIDR

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${VPCPrefix}-Public-Subnet-1-ID

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${VPCPrefix}-Public-Subnet-2-ID

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${VPCPrefix}-Private-Subnet-1-ID

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${VPCPrefix}-Private-Subnet-2-ID

  LambdaSecurityGroupId:
    Description: Lambda Security Group ID
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${VPCPrefix}-Lambda-SG-ID

  EndpointSecurityGroupId:
    Description: Endpoint Security Group ID
    Value: !Ref EndpointSecurityGroup
    Export:
      Name: !Sub ${VPCPrefix}-Endpoint-SG-ID

  NATGatewayId:
    Description: NAT Gateway ID
    Value: !Ref NatGateway
    Export:
      Name: !Sub ${VPCPrefix}-NAT-Gateway-ID

  CloudfrontDistributionId:
    Description: CloudFront distribution ID
    Value: !GetAtt WebsiteDistribution.Id
    Export:
      Name: !Sub "${pApplicationPrefix}-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt WebsiteDistribution.DomainName
    
  CognitoUserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${pApplicationPrefix}-CognitoUserPoolId"

  CognitoAppClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${pApplicationPrefix}-CognitoAppClientId"

  CognitoRegion:
    Value: !Ref "AWS::Region"
    Export:
      Name: !Sub "${pApplicationPrefix}-Region"

  LogsBucketName:
    Description: Name of the logs S3 bucket
    Value: !Ref LogsBucket
    Export:
      Name: !Sub "${pApplicationPrefix}-LogsBucket"

  ServiceWorkbenchLambdaLayer:
    Description: Name of the service workbench lambda layer
    Value: !Ref ServiceWorkbenchLambdaLayer
    Export:
      Name: "ServiceWorkbenchLambdaLayer"

  WorkspaceLambdaExecutionRole:
    Description: Name of the workbench lambda execution role
    Value: !GetAtt WorkspaceLambdaExecutionRole.Arn
    Export:
      Name: "WorkspaceLambdaExecutionRole"

  CustomResourceLambdaExecutionRole:
    Description: Name of the custom resource lambda execution role
    Value: !GetAtt CustomResourceLambdaExecutionRole.Arn
    Export:
      Name: "WorkbenchCustomResourceLambdaExecutionRole"

  RolesLambdaFunctionRole:
    Description: Name of the roles lambda function role
    Value: !GetAtt RolesLambdaFunctionRole.Arn
    Export:
      Name: "RolesLambdaFunctionRole"

  CustomResourceExecutionRoles:
    Description: Name of the custom resource execution roles
    Value: !GetAtt CustomResourceExecutionRoles.Arn
    Export:
      Name: "CustomResourceExecutionRoles"
