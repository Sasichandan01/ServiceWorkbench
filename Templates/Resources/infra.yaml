AWSTemplateFormatVersion: '2010-09-09'
Description: Service Workbench V2 Infrastructure

Parameters:
  pApplicationPrefix:
    Type: String
    Default: develop
    Description: Prefix for the application resources

  pKmsKeyId:
    Type: String
    Default: "b02a32de-34da-462e-9b2c-4a0c8dadf74f"

Resources:
  # S3 bucket for artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      TableName: !Sub "${pApplicationPrefix}-SimpleTable"
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-artifacts"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

  # S3 bucket for logs
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

  # CloudFront Origin Access Control (OAC)
  WebsiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${pApplicationPrefix}-service-workbench-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ArtifactsBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref WebsiteOAC
            OriginPath: /web
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Logging:
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: cloudfront-logs/
          IncludeCookies: false
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

  # S3 Bucket Policy to allow CloudFront OAC access only
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${ArtifactsBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

  # Bucket policy to allow CloudFront to write logs
  CloudFrontLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${LogsBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt LogsBucket.Arn
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

  AgentsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WorkBenchAgnetIAMRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
        - PolicyName: AccessOpensearch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'opensearch:*'
                Resource: '*'
  # OpenSearch DB Cluster
  OpenSearchDB:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: 'poc-workbench-cluster-21'
      EngineVersion: 'OpenSearch_2.17'
      ClusterConfig:
        InstanceCount: 2
        InstanceType: t3.small.search
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig: 
          AvailabilityZoneCount: 2
        WarmEnabled: false
        MultiAZWithStandbyEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp3
        VolumeSize: 10
        Iops: 3000
        Throughput: 125
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref pKmsKeyId
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"             
            Action: "es:*"
            Resource: "*"
      AdvancedOptions:
        indices.fielddata.cache.size: "20"
        rest.action.multi.allow_explicit_index: "true"
        indices.query.bool.max_clause_count: "1024"
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !Ref AgentsRole
      OffPeakWindowOptions:
        Enabled: true
        OffPeakWindow: 
          WindowStartTime: 
            Hours: 0
            Minutes: 0
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      IPAddressType: dualstack
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

                
  OpenSearchClusterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: OpenSearchClusterLambdaRolev31
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"

        - PolicyName: OpenSearchAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpGet
                  - es:ESHttpPost
                  - es:ESHttpPut
                  - es:ESHttpDelete
                  - es:ESHttpHead
                Resource:
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDB}/*"
                  
  OpenSearchClusterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      Timeout: 900
      Role: !GetAtt OpenSearchClusterLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Code: 
        S3Bucket: develop-service-workbench-artifacts
        S3Key: develop/OpensearchVectorizeIndex.zip
      Layers:
        - !Ref OpenSearchLambdaLayer
  
  OpenSearchLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: OpenSearchLambdaLayer
      CompatibleRuntimes:
        - python3.12
      Content:
        S3Bucket: develop-service-workbench-artifacts
        S3Key: develop/OpensearchLayer.zip



  OpenSearchClusterCustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt OpenSearchClusterLambda.Arn
      changesetflag: '20'
      OS_ENDPOINT: !GetAtt OpenSearchDB.DomainEndpoint


#Aurora DB Cluster
#   AuroraDBCluster:
#     Type: AWS::RDS::DBCluster
#     Properties:
#       AvailabilityZones:
#         - ${AWS::Region}c
#       AutoMinorVersionUpgrade: false
#       BackupRetentionPeriod: 7
#       DatabaseName: workbench-aurora-db           
#       DBClusterIdentifier: workbench-aurora-db-cluster
#       DBClusterParameterGroupName: default.aurora-postgresql15
#       DeletionProtection: false
#       EnableIAMDatabaseAuthentication: true
#       Engine: aurora-postgresql
#       EngineMode: provisioned
#       EngineVersion: 15.4
#       MasterUsername: postgres                   
#       ManageMasterUserPassword: true
#       NetworkType: IPV4
#       PerformanceInsightsEnabled: true
#       PerformanceInsightsKmsKeyId: !Ref pKmsKeyId
#       PerformanceInsightsRetentionPeriod: 7
#       ServerlessV2ScalingConfiguration:
#         MinCapacity: 0.5
#         MaxCapacity: 2
#       Tags:
#         - Key: Name
#           Value: "ServiceWorkbench"

# # Aurora DB Instance
#   AuroraDBInstance:
#     Type: AWS::RDS::DBInstance
#     Properties:
#       DBInstanceIdentifier: genai-training-rag-cluster-instance-1
#       DBClusterIdentifier: !Ref AuroraCluster
#       DBInstanceClass: db.serverless
#       Engine: aurora-postgresql
#       PubliclyAccessible: false
#       DBParameterGroupName: default.aurora-postgresql15
#       Port: '5432'
#       Tags:
#         - Key: Name
#           Value: "ServiceWorkbench"     




Outputs:
  CLOUDFRONT_DISTRIBUTION_ID:
    Description: CloudFront distribution ID
    Value: !GetAtt WebsiteDistribution.Id
  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt WebsiteDistribution.DomainName
