---
AWSTemplateFormatVersion: '2010-09-09'
Description: Service Workbench V2 Infrastructure

Parameters:
  pApplicationPrefix:
    Type: String
    Default: service-workbench
    Description: Prefix for the application resources

Resources:
  # S3 bucket for artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-artifacts"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

  # S3 bucket for logs
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

  # CloudFront Origin Access Control (OAC)
  WebsiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${pApplicationPrefix}-service-workbench-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ArtifactsBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref WebsiteOAC
            OriginPath: /web
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Logging:
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: cloudfront-logs/
          IncludeCookies: false
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

  # S3 Bucket Policy to allow CloudFront OAC access only
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${ArtifactsBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

  # Bucket policy to allow CloudFront to write logs
  CloudFrontLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${LogsBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt LogsBucket.Arn
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

# Cognito User Pool and Client
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${pApplicationPrefix}-UserPool"
      AliasAttributes:
        - email
        - preferred_username
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: preferred_username
          AttributeDataType: String
          Required: false
          Mutable: true
      AutoVerifiedAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailSubject: "Your temporary password for WorkBench"
          EmailMessage: "Your username is {username} and temporary password is {####}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Your verification code for WorkBench"
        EmailMessage: "Your verification code is {####}"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${pApplicationPrefix}-Client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
        - COGNITO
      # CallbackURLs:
      #   - "https://example.com/" # Replace with actual URL
      # AllowedOAuthFlowsUserPoolClient: true
      # AllowedOAuthFlows:
      #   - code
      # AllowedOAuthScopes:
      #   - email
      #   - openid
      #   - profile
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "${pApplicationPrefix}-${AWS::AccountId}-auth"
      ManagedLoginVersion: "2"

# Lambda Function for Cognito Triggers Custom Resource
  CognitoTriggersCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-CognitoTriggersCustomResource"
      Handler: index.lambda_handler
      Runtime: python3.13  # Changed to match your other Lambdas
      Role: !GetAtt CognitoTriggersCustomResourceRole.Arn
      Timeout: 300
      MemorySize: 128
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          http = urllib3.PoolManager()
          
          def send_cfn_response(event, context, status, data=None, physical_id=None, reason=None):
              response_body = {
                  "Status": status,
                  "Reason": reason or f"See CloudWatch Logs: {context.log_stream_name}",
                  "PhysicalResourceId": physical_id or context.log_stream_name,
                  "StackId": event['StackId'],
                  "RequestId": event['RequestId'],
                  "LogicalResourceId": event['LogicalResourceId'],
                  "Data": data or {}
              }
              try:
                  encoded_body = json.dumps(response_body).encode('utf-8')
                  headers = {'Content-Type': 'application/json'}
                  resp = http.request('PUT', event['ResponseURL'], body=encoded_body, headers=headers)
                  logger.info(f"CloudFormation response sent: {resp.status}")
              except Exception as e:
                  logger.error(f"Failed to send CloudFormation response: {e}")
                  raise
          
          def lambda_handler(event, context):
              logger.info("Received event: " + json.dumps(event))
              
              request_type = event.get('RequestType')
              props = event.get('ResourceProperties', {})
              physical_id = f"CognitoTriggers-{props.get('UserPoolId', 'UNKNOWN')}"
              
              # Skip if not Create or Update
              if request_type not in ['Create', 'Update']:
                  logger.info(f"No action required for request type: {request_type}")
                  send_cfn_response(event, context, 'SUCCESS', {}, physical_id)
                  return
              
              try:
                  cognito = boto3.client('cognito-idp')
                  user_pool_id = props['UserPoolId']
                  
                  # Configure all four triggers from your template
                  lambda_config = {
                      'PreSignUp': props.get('PreSignUpLambdaArn'),
                      'PreAuthentication': props.get('PreAuthLambdaArn'),
                      'PreTokenGeneration': props.get('PreTokenLambdaArn'),
                      'PostConfirmation': props.get('PostConfirmationLambdaArn'),
                      'PostAuthentication': props.get('PostAuthLambdaArn') 
                  }
                  
                  # Remove None values
                  lambda_config = {k: v for k, v in lambda_config.items() if v}
                  
                  if not lambda_config:
                      raise ValueError("No valid Lambda triggers provided")
                  
                  logger.info(f"Updating UserPool {user_pool_id} with LambdaConfig: {lambda_config}")
                  cognito.update_user_pool(
                      UserPoolId=user_pool_id,
                      LambdaConfig=lambda_config
                  )
                  
                  send_cfn_response(event, context, 'SUCCESS', {}, physical_id)
              
              except Exception as e:
                  logger.error(f"Error updating Cognito triggers: {e}")
                  send_cfn_response(event, context, 'FAILED', {}, physical_id, reason=str(e))

# IAM Role for the Custom Resource Lambda
  CognitoTriggersCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:UpdateUserPool
                Resource: !GetAtt UserPool.Arn

# Custom Resource Definition
  CognitoTriggersResource:
    Type: Custom::CognitoTriggers
    Properties:
      ServiceToken: !GetAtt CognitoTriggersCustomResource.Arn
      UserPoolId: !Ref UserPool
      PreSignUpLambdaArn: !GetAtt PreSignUpFunction.Arn
      PreAuthLambdaArn: !GetAtt PreAuthFunction.Arn
      PreTokenLambdaArn: !GetAtt PreTokenGenerationFunction.Arn
      PostConfirmationLambdaArn: !GetAtt PostConfirmationFunction.Arn
      PostAuthLambdaArn: !GetAtt PostAuthFunction.Arn

#Lambda Roles
  PreSignupLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: SQSPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SQSPutPolicies
                Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt CleanupQueue.Arn

  PreAuthLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: S3Policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserTable}"
  
  PreTokenGenerationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: S3Policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserTable}"
    
  PostConfirmationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserTable}"
        - PolicyName: CognitoPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CognitoAccess
                Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminGetUser
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
        - PolicyName: SESPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SESAccess
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
        - PolicyName: SSMPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SSMAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: "*"

  PostAuthLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DynamoDBPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ActivityLogsTable}"

  UserPoolLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: UserPoolLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminDeleteUser
                Resource: !GetAtt UserPool.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt CleanupQueue.Arn


#Permissions for Lambda to call Cognito
  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreTokenPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PostConfirmPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PostAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

#Lambda Layers
  RequestLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${pApplicationPrefix}-requests-layer"
      Description: Request validator layer for Lambda functions
      Content:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-requests.zip"
      CompatibleRuntimes:
        - python3.13

#Lambdas
  PreSignUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreSignUp"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PreSignupLambdaExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-Presignup.zip"
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
      Layers:
        - !Ref RequestLayer

  PreAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreAuth"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PreAuthLambdaExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-PreAuth.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable

  PreTokenGenerationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreTokenGen"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PreTokenGenerationLambdaExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-PreTokenGeneration.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable

  PostConfirmationFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${pApplicationPrefix}-PostConfirm"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt PostConfirmationLambdaExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-Postconfirmation.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
          DOMAIN: "ServiceWorkbench v2.0"
          SOURCE_EMAIL: "mayank.gupta@cloudwick.com"

  PostAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PostAuth"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      Role: !GetAtt PostAuthLambdaExecutionRole.Arn
      Code:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-PostAuth.zip"
      Environment:
        Variables:
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable

  UserPoolCleanUp:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-Workbench-UserPool"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      Role: !GetAtt UserPoolLambdaExecutionRole.Arn
      Code:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-Userpool.zip"
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
          UserPoolId: !Ref UserPool
          USER_TABLE_NAME: !Ref UserTable

#DynamoDB Tables
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${pApplicationPrefix}-UserTable"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  
  ActivityLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${pApplicationPrefix}-ActivityLogsTable"
      AttributeDefinitions:
        - AttributeName: LogId
          AttributeType: S
      KeySchema:
        - AttributeName: LogId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      
#SQS Queues
  CleanupQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${pApplicationPrefix}-CleanupQueue"
      VisibilityTimeout: 65
      ReceiveMessageWaitTimeSeconds: 20
      DelaySeconds: 900


Outputs:
  CloudfrontDistributionId:
    Description: CloudFront distribution ID
    Value: !GetAtt WebsiteDistribution.Id
    Export:
      Name: !Sub "${pApplicationPrefix}-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt WebsiteDistribution.DomainName
    
  CognitoUserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${pApplicationPrefix}-CognitoUserPoolId"

  CognitoAppClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${pApplicationPrefix}-CognitoAppClientId"

  CognitoRegion:
    Value: !Ref "AWS::Region"
    Export:
      Name: !Sub "${pApplicationPrefix}-Region"