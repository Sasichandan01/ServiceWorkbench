---
AWSTemplateFormatVersion: '2010-09-09'
Description: Service Workbench V2 Infrastructure

Parameters:
  pApplicationPrefix:
    Type: String
    Default: "wb-WorkBench"
    Description: Prefix for the application resources
  
  pArtifactsBucketName:
    Type: String
    Default: "develop-service-workbench-artifacts"
    Description: Name of the S3 bucket for artifacts

Resources:
#Lambda Layers
  RequestLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${pApplicationPrefix}-requests-layer"
      Description: Request validator layer for Lambda functions
      Content:
        S3Bucket: "mayank-swb"
        S3Key: "Workbench-requests.zip"
      CompatibleRuntimes:
        - python3.13

# S3 bucket for artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-artifacts"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  # S3 bucket for logs
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${pApplicationPrefix}-service-workbench-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# CloudFront Origin Access Control (OAC)
  WebsiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${pApplicationPrefix}-service-workbench-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

# CloudFront Distribution
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ArtifactsBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref WebsiteOAC
            OriginPath: /web
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        Logging:
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: cloudfront-logs/
          IncludeCookies: false
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
      Tags:
        - Key: Name
          Value: "ServiceWorkbench"

# S3 Bucket Policy to allow CloudFront OAC access only
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${ArtifactsBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

# Bucket policy to allow CloudFront to write logs
  CloudFrontLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${LogsBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt LogsBucket.Arn
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

# Cognito User Pool and Client
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${pApplicationPrefix}-UserPool"
      AliasAttributes:
        - email
        - preferred_username
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: preferred_username
          AttributeDataType: String
          Required: false
          Mutable: true
      AutoVerifiedAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailSubject: "Your temporary password for WorkBench"
          EmailMessage: "Your username is {username} and temporary password is {####}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Your verification code for WorkBench"
        EmailMessage: "Your verification code is {####}"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${pApplicationPrefix}-Client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "${pApplicationPrefix}-${AWS::AccountId}-auth"
      ManagedLoginVersion: "2"

# Lambda Function for Cognito Triggers Custom Resource
  CognitoTriggersCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-CognitoTriggersCustomResource"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      Role: !GetAtt CustomResourceExecutionRoles.Arn
      Timeout: 300
      MemorySize: 128
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambdas/workbenchcognitocustomresourcelambda/WorkbenchCognitoCustomResource.zip"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# IAM Role for the Custom Resource Lambda
  CustomResourceExecutionRoles:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:UpdateUserPool
                Resource: !GetAtt UserPool.Arn
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# Custom Resource Definition
  CognitoTriggersResource:
    Type: Custom::CognitoTriggers
    Properties:
      ServiceToken: !GetAtt CognitoTriggersCustomResource.Arn
      UserPoolId: !Ref UserPool
      PreSignUpLambdaArn: !GetAtt PreSignUpFunction.Arn
      PreAuthLambdaArn: !GetAtt PreAuthFunction.Arn
      PreTokenLambdaArn: !GetAtt PreTokenGenerationFunction.Arn
      PostConfirmationLambdaArn: !GetAtt PostConfirmationFunction.Arn
      PostAuthLambdaArn: !GetAtt PostAuthFunction.Arn
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

#Lambda Roles
  UserExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        
        - PolicyName: SQSPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SQSPutPolicies
                Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt CleanupQueue.Arn
        
        - PolicyName: DynamoDBPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: DynamoDBUserTableAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserTable}"
              - Sid: DynamoDBActivityLogsAccess
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ActivityLogsTable}"
        
        - PolicyName: CognitoPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CognitoAccess
                Effect: Allow
                Action:
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
        
        - PolicyName: SESPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SESAccess
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
        
        - PolicyName: SSMPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: SSMAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: "*"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# Event Source Mapping for Cleanup Queue
  CleanupQueueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt CleanupQueue.Arn
      FunctionName: !GetAtt UserPoolCleanUp.Arn
      Tags:
        - Key: Name
          Value: "WorkbenchV2"


#Permissions for Lambda to call Cognito
  PreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PreTokenPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  PostConfirmPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  PostAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostAuthFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

#Lambdas
  PreSignUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreSignUp"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambdas/workbenchpresignuplambda/WorkbenchPresignup.zip"
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
      Layers:
        - !Ref RequestLayer
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PreAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreAuth"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambdas/workbenchpreauthlambda/WorkbenchPreAuth.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PreTokenGenerationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PreTokenGen"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambdas/workbenchpretokengenerationlambda/WorkbenchPreTokengeneration.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PostConfirmationFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${pApplicationPrefix}-PostConfirm"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UserExecutionRole.Arn
      Runtime: python3.13
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambdas/workbenchpostconfirmationlambda/WorkbenchPostConfirmation.zip"
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
          DOMAIN: "ServiceWorkbench v2.0"
          SOURCE_EMAIL: "mayank.gupta@cloudwick.com"
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  PostAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-PostAuth"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      Role: !GetAtt UserExecutionRole.Arn
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambdas/workbenchpostauthlambda/WorkbenchPostAuth.zip"
      Environment:
        Variables:
          ACTIVITY_LOGS_TABLE: !Ref ActivityLogsTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

  UserPoolCleanUp:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${pApplicationPrefix}-Workbench-UserPool"
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      Role: !GetAtt UserExecutionRole.Arn
      Code:
        S3Bucket: !Ref pArtifactsBucketName
        S3Key: "lambdas/workbenchuserpoolcleanuplambda/WorkbenchUserpoolCleanup.zip"
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          QUEUE_URL: !Ref CleanupQueue
          USER_POOL_ID: !Ref UserPool
          USER_TABLE_NAME: !Ref UserTable
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

#DynamoDB Tables
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${pApplicationPrefix}-UserTable"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Name
          Value: "WorkbenchV2"
  
  ActivityLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${pApplicationPrefix}-ActivityLogsTable"
      AttributeDefinitions:
        - AttributeName: LogId
          AttributeType: S
      KeySchema:
        - AttributeName: LogId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# DLQ for failed messages
  CleanupDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${pApplicationPrefix}-CleanupDLQ"
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

# Main SQS queue with redrive policy
  CleanupQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${pApplicationPrefix}-CleanupQueue"
      VisibilityTimeout: 65
      ReceiveMessageWaitTimeSeconds: 20
      DelaySeconds: 900
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CleanupDLQ.Arn
        maxReceiveCount: 5  # Message is sent to DLQ after 5 failed receives
      Tags:
        - Key: Name
          Value: "WorkbenchV2"

Outputs:
  CloudfrontDistributionId:
    Description: CloudFront distribution ID
    Value: !GetAtt WebsiteDistribution.Id
    Export:
      Name: !Sub "${pApplicationPrefix}-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: Domain name of the CloudFront distribution
    Value: !GetAtt WebsiteDistribution.DomainName
    
  CognitoUserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${pApplicationPrefix}-CognitoUserPoolId"

  CognitoAppClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${pApplicationPrefix}-CognitoAppClientId"

  CognitoRegion:
    Value: !Ref "AWS::Region"
    Export:
      Name: !Sub "${pApplicationPrefix}-Region"