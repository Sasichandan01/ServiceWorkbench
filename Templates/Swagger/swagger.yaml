openapi: "3.0.1"
info:
  version: "2025-06-29T14:42:46Z"
  title: "WorkbenchV2 API"
  description: "WorkbenchV2 API for managing workspaces, solutions, datasources, and related resources"

paths:
  /workspaces:
    get:
      summary: "List all workspaces"
      parameters:
        - name: "filterBy"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Filter criteria"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Sort criteria"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Number of items to return"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Number of items to skip"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspacesResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    post:
      summary: "Create a new workspace"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkspaceRequest"
      responses:
        "200":
          description: "Workspace created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWorkspaceResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /workspaces/{workspace_id}:
    get:
      summary: "Get workspace details"
      description: "Get the details of an individual workspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
      responses:
        "200":
          description: "Workspace details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceDetails"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    put:
      summary: "Update workspace"
      description: "Update the details of a workspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "action"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: ["enable", "disable"]
          description: "Action to enable/disable workspace"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWorkspaceRequest"
      responses:
        "200":
          description: "Workspace updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    delete:
      summary: "Delete workspace"
      description: "Delete a workspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
      responses:
        "200":
          description: "Workspace deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    options:
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /workspaces/{workspace_id}/solutions:
    get:
      summary: "List all solutions in a workspace"
      description: "Get all solutions within a specific workspace with filtering and sorting options"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "filterBy"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Filter criteria"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Sort criteria"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Number of items to return"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Number of items to skip"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolutionsResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    post:
      summary: "Create a new solution"
      description: "Create a new solution within a workspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSolutionRequest"
      responses:
        "200":
          description: "Solution created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    options:
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /workspaces/{workspace_id}/solutions/{solution_id}:
    get:
      summary: "Get solution details"
      description: "Get details of a specific solution, optionally for a specific version"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Solution ID"
        - name: "version"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Specific version of the solution"
      responses:
        "200":
          description: "Solution details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolutionDetails"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    put:
      summary: "Update solution"
      description: "Update the details of an existing solution"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Solution ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSolutionRequest"
      responses:
        "200":
          description: "Solution updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    delete:
      summary: "Delete solution"
      description: "Delete a solution from the workspace"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Solution ID"
      responses:
        "200":
          description: "Solution deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    options:
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /workspaces/{workspace_id}/solutions/{solution_id}/executions:
    get:
      summary: "Get execution history"
      description: "Get execution history for a specific solution"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Solution ID"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Number of items to return"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Number of items to skip"
      responses:
        "200":
          description: "Execution history retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionHistoryResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    post:
      summary: "Run solution"
      description: "Execute a solution"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Solution ID"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunSolutionRequest"
      responses:
        "200":
          description: "Solution execution started successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunSolutionResponse"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    options:
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /workspaces/{workspace_id}/solutions/{solution_id}/executions/{execution_id}:
    get:
      summary: "Get execution details"
      description: "Get details of a specific execution"
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Workspace ID"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Solution ID"
        - name: "execution_id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Execution ID"
      responses:
        "200":
          description: "Execution details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionDetails"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-workspaces-lambda/invocations
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    options:
      parameters:
        - name: "workspace_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "solution_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "execution_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /roles:
    get:
      summary: "Get all roles"
      description: "Get all roles"
      parameters:
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Number of items to return"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
          description: "Page number"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Sort by"
        - name: "sortOrder"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Sort order"
        - name: "filterBy"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Filter by"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesResponse"
      security:
        - WorkbenchAuthorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-RolesLambdaFunction/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"

    post:
      summary: "Add role"
      description: "Add a role"
      parameters:
        - name: "action"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - WorkbenchAuthorizer: []
      x-amazon-apigateway-request-validator: "None"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-RolesLambdaFunction/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"

    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - WorkbenchAuthorizer: []
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"

  /roles/{role_name}:
    get:
      parameters:
        - name: "role_name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesDetailsResponse"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - WorkbenchAuthorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-RolesLambdaFunction/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    put:
      parameters:
        - name: "role_name"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RolesUpdateBody"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - WorkbenchAuthorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-RolesLambdaFunction/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    delete:
      parameters:
        - name: "role_name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
        "404":
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - WorkbenchAuthorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:placeholder-RolesLambdaFunction/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"

    options:
      parameters:
        - name: "role_name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"

components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"

    MessageResponse:
      type: "object"
      properties:
        Message:
          type: "string"

    WorkspacesResponse:
      type: "object"
      properties:
        Workspaces:
          type: "array"
          items:
            $ref: "#/components/schemas/WorkspaceDetails"
        Pagination:
          $ref: "#/components/schemas/Pagination"

    CreateWorkspaceResponse:
      type: "object"
      properties:
        Message:
          type: "string"
        WorkspaceId:
          type: "string"

    WorkspaceDetails:
      type: "object"
      properties:
        WorkspaceId:
          type: "string"
        WorkspaceName:
          type: "string"
        Description:
          type: "string"
        Tags:
          type: "array"
          items:
            type: "string"
        WorkspaceStatus:
          type: "string"
        Datasources:
          type: "array"
          items:
            $ref: "#/components/schemas/Datasource"
        CreatedBy:
          type: "string"
        CreationTime:
          type: "string"
        LastUpdatedBy:
          type: "string"
        LastUpdationTime:
          type: "string"
        Cost:
          type: "string"

    CreateWorkspaceRequest:
      type: "object"
      properties:
        WorkspaceName:
          type: "string"
        Description:
          type: "string"
        Tags:
          type: "array"
          items:
            type: "string"

    UpdateWorkspaceRequest:
      type: "object"
      properties:
        WorkspaceName:
          type: "string"
        Description:
          type: "string"
        Tags:
          type: "array"
          items:
            type: "string"

    Pagination:
      type: "object"
      properties:
        limit:
          type: "integer"
        offset:
          type: "integer"
        total:
          type: "integer"

    Datasource:
      type: "object"
      properties:
        DatasourceId:
          type: "string"
        DatasourceName:
          type: "string"
        DatasourceType:
          type: "string"
        Status:
          type: "string"
    
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: "Error message"
      required:
        - message

    SolutionsResponse:
      type: "object"
      properties:
        Solutions:
          type: "array"
          items:
            $ref: "#/components/schemas/SolutionSummary"
        Pagination:
          $ref: "#/components/schemas/Pagination"

    SolutionSummary:
      type: "object"
      properties:
        SolutionId:
          type: "string"
        SolutionName:
          type: "string"
        Description:
          type: "string"
        CreatedBy:
          type: "string"
        CreationTime:
          type: "string"
        LastUpdatedBy:
          type: "string"
        LastUpdationTime:
          type: "string"

    SolutionDetails:
      type: "object"
      properties:
        SolutionId:
          type: "string"
        SolutionName:
          type: "string"
        Description:
          type: "string"
        CreatedBy:
          type: "string"
        Tags:
          type: "array"
          items:
            type: "string"
        CftS3Path:
          type: "string"
        Resources:
          type: "array"
          items:
            $ref: "#/components/schemas/Resource"
        SolutionStatus:
          type: "string"
        CreationTime:
          type: "string"
        LastUpdatedBy:
          type: "string"
        LastUpdationTime:
          type: "string"
        Cost:
          type: "string"
        Versions:
          type: "array"
          items:
            type: "string"

    Resource:
      type: "object"
      properties:
        ResourceType:
          type: "string"
        ResourceName:
          type: "string"
        ResourceArn:
          type: "string"

    CreateSolutionRequest:
      type: "object"
      properties:
        SolutionName:
          type: "string"
        Description:
          type: "string"
      required:
        - SolutionName

    UpdateSolutionRequest:
      type: "object"
      properties:
        SolutionName:
          type: "string"
        Description:
          type: "string"
        Tags:
          type: "array"
          items:
            type: "string"

    ExecutionHistoryResponse:
      type: "object"
      properties:
        ExecutionHistory:
          type: "array"
          items:
            $ref: "#/components/schemas/ExecutionSummary"
        Pagination:
          $ref: "#/components/schemas/Pagination"

    ExecutionSummary:
      type: "object"
      properties:
        ExecutionId:
          type: "string"
        ExecutedBy:
          type: "string"
        Duration:
          type: "string"
        StartTime:
          type: "string"
        ExecutionStatus:
          type: "string"
        Message:
          type: "string"

    ExecutionDetails:
      type: "object"
      properties:
        ExecutionId:
          type: "string"
        ExecutedBy:
          type: "string"
        Duration:
          type: "string"
        StartTime:
          type: "string"
        ExecutionStatus:
          type: "string"
        Message:
          type: "string"
        LogsStatus:
          type: "string"
        LogsS3Path:
          type: "string"

    RunSolutionRequest:
      type: "object"
      properties:
        inputParameters:
          type: "object"
          description: "Input parameters for solution execution"
      additionalProperties: true

    RunSolutionResponse:
      type: "object"
      properties:
        Message:
          type: "string"
        ExecutionId:
          type: "string"
    
    RolesResponse:
      title: "RolesResponse"
      required:
        - "Pagination"
        - "Roles"
      type: "object"
      properties:
        Roles:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
        Pagination:
          $ref: "#/components/schemas/RolesPagination"
    Role:
      type: "object"
      required:
        - "CreatedBy"
        - "CreationTime"
        - "LastUpdatedBy"
        - "LastUpdationTime"
        - "Role"
      properties:
        Role:
          type: "string"
        CreatedBy:
          type: "string"
        CreationTime:
          type: "string"
          format: "date-time"
        LastUpdatedBy:
          type: "string"
        LastUpdationTime:
          type: "string"
          format: "date-time"
    RolesPagination:
      type: "object"
      required:
        - "Count"
        - "NextAvailable"
        - "Page"
        - "TotalCount"
      properties:
        Count:
          type: "integer"
        TotalCount:
          type: "integer"
        NextAvailable:
          type: "boolean"
        Page:
          type: "integer"
    RolesDetailsResponse:
      title: "RoleObject"
      required:
        - "CreatedBy"
        - "CreationTime"
        - "LastUpdatedBy"
        - "LastUpdationTime"
        - "Permissions"
        - "Role"
      type: "object"
      properties:
        Role:
          type: "string"
        Permissions:
          type: "array"
          items:
            type: "string"
        CreatedBy:
          type: "string"
        CreationTime:
          type: "string"
          format: "date-time"
        LastUpdatedBy:
          type: "string"
        LastUpdationTime:
          type: "string"
          format: "date-time"
    RolesBody:
      title: "RoleRequest"
      required:
        - "Permissions"
        - "Role"
      type: "object"
      properties:
        Role:
          type: "string"
        Permissions:
          type: "array"
          items:
            type: "string"
    RolesUpdateBody:
      title: "PermissionsOnly"
      required:
        - "Permissions"
      type: "object"
      properties:
        Permissions:
          type: "array"
          items:
            type: "string"
  securitySchemes:
    WorkbenchAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:043309350924:function:develop-LambdaAuthorizer/invocations"
        authorizerResultTtlInSeconds: 0
        identitySource: "method.request.header.Authorization"
        type: "request"

x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true
